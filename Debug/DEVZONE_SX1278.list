
DEVZONE_SX1278.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800445c  0800445c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004464  08004464  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800446c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000070  080044dc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  080044dc  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acae  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c60  00000000  00000000  0002ad47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002d358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018588  00000000  00000000  0002dc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d54  00000000  00000000  000461d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085d29  00000000  00000000  0004df2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3c55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb4  00000000  00000000  000d3cd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004224 	.word	0x08004224

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004224 	.word	0x08004224

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b974 	b.w	8000450 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	468c      	mov	ip, r1
 8000186:	4604      	mov	r4, r0
 8000188:	9e08      	ldr	r6, [sp, #32]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d14b      	bne.n	8000226 <__udivmoddi4+0xa6>
 800018e:	428a      	cmp	r2, r1
 8000190:	4615      	mov	r5, r2
 8000192:	d967      	bls.n	8000264 <__udivmoddi4+0xe4>
 8000194:	fab2 f282 	clz	r2, r2
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0720 	rsb	r7, r2, #32
 800019e:	fa01 f302 	lsl.w	r3, r1, r2
 80001a2:	fa20 f707 	lsr.w	r7, r0, r7
 80001a6:	4095      	lsls	r5, r2
 80001a8:	ea47 0c03 	orr.w	ip, r7, r3
 80001ac:	4094      	lsls	r4, r2
 80001ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001b2:	fbbc f7fe 	udiv	r7, ip, lr
 80001b6:	fa1f f885 	uxth.w	r8, r5
 80001ba:	fb0e c317 	mls	r3, lr, r7, ip
 80001be:	fb07 f908 	mul.w	r9, r7, r8
 80001c2:	0c21      	lsrs	r1, r4, #16
 80001c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001c8:	4599      	cmp	r9, r3
 80001ca:	d909      	bls.n	80001e0 <__udivmoddi4+0x60>
 80001cc:	18eb      	adds	r3, r5, r3
 80001ce:	f107 31ff 	add.w	r1, r7, #4294967295
 80001d2:	f080 811c 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001d6:	4599      	cmp	r9, r3
 80001d8:	f240 8119 	bls.w	800040e <__udivmoddi4+0x28e>
 80001dc:	3f02      	subs	r7, #2
 80001de:	442b      	add	r3, r5
 80001e0:	eba3 0309 	sub.w	r3, r3, r9
 80001e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80001e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80001ec:	fb00 f108 	mul.w	r1, r0, r8
 80001f0:	b2a4      	uxth	r4, r4
 80001f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001f6:	42a1      	cmp	r1, r4
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x8e>
 80001fa:	192c      	adds	r4, r5, r4
 80001fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000200:	f080 8107 	bcs.w	8000412 <__udivmoddi4+0x292>
 8000204:	42a1      	cmp	r1, r4
 8000206:	f240 8104 	bls.w	8000412 <__udivmoddi4+0x292>
 800020a:	3802      	subs	r0, #2
 800020c:	442c      	add	r4, r5
 800020e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000212:	2700      	movs	r7, #0
 8000214:	1a64      	subs	r4, r4, r1
 8000216:	b11e      	cbz	r6, 8000220 <__udivmoddi4+0xa0>
 8000218:	2300      	movs	r3, #0
 800021a:	40d4      	lsrs	r4, r2
 800021c:	e9c6 4300 	strd	r4, r3, [r6]
 8000220:	4639      	mov	r1, r7
 8000222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000226:	428b      	cmp	r3, r1
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0xbe>
 800022a:	2e00      	cmp	r6, #0
 800022c:	f000 80ec 	beq.w	8000408 <__udivmoddi4+0x288>
 8000230:	2700      	movs	r7, #0
 8000232:	e9c6 0100 	strd	r0, r1, [r6]
 8000236:	4638      	mov	r0, r7
 8000238:	4639      	mov	r1, r7
 800023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023e:	fab3 f783 	clz	r7, r3
 8000242:	2f00      	cmp	r7, #0
 8000244:	d148      	bne.n	80002d8 <__udivmoddi4+0x158>
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__udivmoddi4+0xd0>
 800024a:	4282      	cmp	r2, r0
 800024c:	f200 80fb 	bhi.w	8000446 <__udivmoddi4+0x2c6>
 8000250:	1a84      	subs	r4, r0, r2
 8000252:	eb61 0303 	sbc.w	r3, r1, r3
 8000256:	2001      	movs	r0, #1
 8000258:	469c      	mov	ip, r3
 800025a:	2e00      	cmp	r6, #0
 800025c:	d0e0      	beq.n	8000220 <__udivmoddi4+0xa0>
 800025e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000262:	e7dd      	b.n	8000220 <__udivmoddi4+0xa0>
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xe8>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	2a00      	cmp	r2, #0
 800026e:	f040 808f 	bne.w	8000390 <__udivmoddi4+0x210>
 8000272:	2701      	movs	r7, #1
 8000274:	1b49      	subs	r1, r1, r5
 8000276:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800027a:	fa1f f985 	uxth.w	r9, r5
 800027e:	fbb1 fef8 	udiv	lr, r1, r8
 8000282:	fb08 111e 	mls	r1, r8, lr, r1
 8000286:	fb09 f00e 	mul.w	r0, r9, lr
 800028a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800028e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000292:	4298      	cmp	r0, r3
 8000294:	d907      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000296:	18eb      	adds	r3, r5, r3
 8000298:	f10e 31ff 	add.w	r1, lr, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4298      	cmp	r0, r3
 80002a0:	f200 80cd 	bhi.w	800043e <__udivmoddi4+0x2be>
 80002a4:	468e      	mov	lr, r1
 80002a6:	1a1b      	subs	r3, r3, r0
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	fb09 f900 	mul.w	r9, r9, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ba:	45a1      	cmp	r9, r4
 80002bc:	d907      	bls.n	80002ce <__udivmoddi4+0x14e>
 80002be:	192c      	adds	r4, r5, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	d202      	bcs.n	80002cc <__udivmoddi4+0x14c>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f200 80b6 	bhi.w	8000438 <__udivmoddi4+0x2b8>
 80002cc:	4618      	mov	r0, r3
 80002ce:	eba4 0409 	sub.w	r4, r4, r9
 80002d2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002d6:	e79e      	b.n	8000216 <__udivmoddi4+0x96>
 80002d8:	f1c7 0520 	rsb	r5, r7, #32
 80002dc:	40bb      	lsls	r3, r7
 80002de:	fa22 fc05 	lsr.w	ip, r2, r5
 80002e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e6:	fa21 f405 	lsr.w	r4, r1, r5
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fbb4 f9fe 	udiv	r9, r4, lr
 80002f2:	fa1f f88c 	uxth.w	r8, ip
 80002f6:	fb0e 4419 	mls	r4, lr, r9, r4
 80002fa:	fa20 f305 	lsr.w	r3, r0, r5
 80002fe:	40b9      	lsls	r1, r7
 8000300:	fb09 fa08 	mul.w	sl, r9, r8
 8000304:	4319      	orrs	r1, r3
 8000306:	0c0b      	lsrs	r3, r1, #16
 8000308:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800030c:	45a2      	cmp	sl, r4
 800030e:	fa02 f207 	lsl.w	r2, r2, r7
 8000312:	fa00 f307 	lsl.w	r3, r0, r7
 8000316:	d90b      	bls.n	8000330 <__udivmoddi4+0x1b0>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000320:	f080 8088 	bcs.w	8000434 <__udivmoddi4+0x2b4>
 8000324:	45a2      	cmp	sl, r4
 8000326:	f240 8085 	bls.w	8000434 <__udivmoddi4+0x2b4>
 800032a:	f1a9 0902 	sub.w	r9, r9, #2
 800032e:	4464      	add	r4, ip
 8000330:	eba4 040a 	sub.w	r4, r4, sl
 8000334:	fbb4 f0fe 	udiv	r0, r4, lr
 8000338:	fb0e 4410 	mls	r4, lr, r0, r4
 800033c:	fb00 fa08 	mul.w	sl, r0, r8
 8000340:	b289      	uxth	r1, r1
 8000342:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000346:	45a2      	cmp	sl, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000352:	d26b      	bcs.n	800042c <__udivmoddi4+0x2ac>
 8000354:	45a2      	cmp	sl, r4
 8000356:	d969      	bls.n	800042c <__udivmoddi4+0x2ac>
 8000358:	3802      	subs	r0, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000360:	fba0 8902 	umull	r8, r9, r0, r2
 8000364:	eba4 040a 	sub.w	r4, r4, sl
 8000368:	454c      	cmp	r4, r9
 800036a:	4641      	mov	r1, r8
 800036c:	46ce      	mov	lr, r9
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d069      	beq.n	800044a <__udivmoddi4+0x2ca>
 8000376:	1a5a      	subs	r2, r3, r1
 8000378:	eb64 040e 	sbc.w	r4, r4, lr
 800037c:	fa04 f505 	lsl.w	r5, r4, r5
 8000380:	fa22 f307 	lsr.w	r3, r2, r7
 8000384:	40fc      	lsrs	r4, r7
 8000386:	431d      	orrs	r5, r3
 8000388:	e9c6 5400 	strd	r5, r4, [r6]
 800038c:	2700      	movs	r7, #0
 800038e:	e747      	b.n	8000220 <__udivmoddi4+0xa0>
 8000390:	4095      	lsls	r5, r2
 8000392:	f1c2 0320 	rsb	r3, r2, #32
 8000396:	fa21 f003 	lsr.w	r0, r1, r3
 800039a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800039e:	fbb0 f7f8 	udiv	r7, r0, r8
 80003a2:	fa1f f985 	uxth.w	r9, r5
 80003a6:	fb08 0017 	mls	r0, r8, r7, r0
 80003aa:	fa24 f303 	lsr.w	r3, r4, r3
 80003ae:	4091      	lsls	r1, r2
 80003b0:	fb07 fc09 	mul.w	ip, r7, r9
 80003b4:	430b      	orrs	r3, r1
 80003b6:	0c19      	lsrs	r1, r3, #16
 80003b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003bc:	458c      	cmp	ip, r1
 80003be:	fa04 f402 	lsl.w	r4, r4, r2
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x254>
 80003c4:	1869      	adds	r1, r5, r1
 80003c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80003ca:	d231      	bcs.n	8000430 <__udivmoddi4+0x2b0>
 80003cc:	458c      	cmp	ip, r1
 80003ce:	d92f      	bls.n	8000430 <__udivmoddi4+0x2b0>
 80003d0:	3f02      	subs	r7, #2
 80003d2:	4429      	add	r1, r5
 80003d4:	eba1 010c 	sub.w	r1, r1, ip
 80003d8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003dc:	fb08 1c10 	mls	ip, r8, r0, r1
 80003e0:	fb00 fe09 	mul.w	lr, r0, r9
 80003e4:	b299      	uxth	r1, r3
 80003e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x27e>
 80003ee:	1869      	adds	r1, r5, r1
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f4:	d218      	bcs.n	8000428 <__udivmoddi4+0x2a8>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d916      	bls.n	8000428 <__udivmoddi4+0x2a8>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4429      	add	r1, r5
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4637      	mov	r7, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e708      	b.n	8000220 <__udivmoddi4+0xa0>
 800040e:	460f      	mov	r7, r1
 8000410:	e6e6      	b.n	80001e0 <__udivmoddi4+0x60>
 8000412:	4618      	mov	r0, r3
 8000414:	e6fb      	b.n	800020e <__udivmoddi4+0x8e>
 8000416:	4543      	cmp	r3, r8
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb8 0102 	subs.w	r1, r8, r2
 800041e:	eb69 020c 	sbc.w	r2, r9, ip
 8000422:	3801      	subs	r0, #1
 8000424:	4696      	mov	lr, r2
 8000426:	e7a4      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000428:	4618      	mov	r0, r3
 800042a:	e7e8      	b.n	80003fe <__udivmoddi4+0x27e>
 800042c:	4608      	mov	r0, r1
 800042e:	e795      	b.n	800035c <__udivmoddi4+0x1dc>
 8000430:	4607      	mov	r7, r0
 8000432:	e7cf      	b.n	80003d4 <__udivmoddi4+0x254>
 8000434:	4681      	mov	r9, r0
 8000436:	e77b      	b.n	8000330 <__udivmoddi4+0x1b0>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	e747      	b.n	80002ce <__udivmoddi4+0x14e>
 800043e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000442:	442b      	add	r3, r5
 8000444:	e72f      	b.n	80002a6 <__udivmoddi4+0x126>
 8000446:	4638      	mov	r0, r7
 8000448:	e707      	b.n	800025a <__udivmoddi4+0xda>
 800044a:	4637      	mov	r7, r6
 800044c:	e6e8      	b.n	8000220 <__udivmoddi4+0xa0>
 800044e:	bf00      	nop

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop

08000454 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	78fa      	ldrb	r2, [r7, #3]
 8000466:	4611      	mov	r1, r2
 8000468:	4618      	mov	r0, r3
 800046a:	f000 fbd4 	bl	8000c16 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 fbee 	bl	8000c54 <SX1278_hw_SPIReadByte>
 8000478:	4603      	mov	r3, r0
 800047a:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2101      	movs	r1, #1
 8000482:	4618      	mov	r0, r3
 8000484:	f000 fb8c 	bl	8000ba0 <SX1278_hw_SetNSS>
	return tmp;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	460b      	mov	r3, r1
 800049c:	70fb      	strb	r3, [r7, #3]
 800049e:	4613      	mov	r3, r2
 80004a0:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2100      	movs	r1, #0
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fb79 	bl	8000ba0 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	78fb      	ldrb	r3, [r7, #3]
 80004b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	4610      	mov	r0, r2
 80004be:	f000 fbaa 	bl	8000c16 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	78ba      	ldrb	r2, [r7, #2]
 80004c8:	4611      	mov	r1, r2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fba3 	bl	8000c16 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2101      	movs	r1, #1
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fb62 	bl	8000ba0 <SX1278_hw_SetNSS>
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	461a      	mov	r2, r3
 80004f0:	460b      	mov	r3, r1
 80004f2:	72fb      	strb	r3, [r7, #11]
 80004f4:	4613      	mov	r3, r2
 80004f6:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004f8:	7abb      	ldrb	r3, [r7, #10]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d927      	bls.n	800054e <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fb4b 	bl	8000ba0 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	7afa      	ldrb	r2, [r7, #11]
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fb7f 	bl	8000c16 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000518:	2300      	movs	r3, #0
 800051a:	75fb      	strb	r3, [r7, #23]
 800051c:	e00c      	b.n	8000538 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	6819      	ldr	r1, [r3, #0]
 8000522:	7dfb      	ldrb	r3, [r7, #23]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	18d4      	adds	r4, r2, r3
 8000528:	4608      	mov	r0, r1
 800052a:	f000 fb93 	bl	8000c54 <SX1278_hw_SPIReadByte>
 800052e:	4603      	mov	r3, r0
 8000530:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000532:	7dfb      	ldrb	r3, [r7, #23]
 8000534:	3301      	adds	r3, #1
 8000536:	75fb      	strb	r3, [r7, #23]
 8000538:	7dfa      	ldrb	r2, [r7, #23]
 800053a:	7abb      	ldrb	r3, [r7, #10]
 800053c:	429a      	cmp	r2, r3
 800053e:	d3ee      	bcc.n	800051e <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fb2a 	bl	8000ba0 <SX1278_hw_SetNSS>
 800054c:	e000      	b.n	8000550 <SX1278_SPIBurstRead+0x6c>
		return;
 800054e:	bf00      	nop
	}
}
 8000550:	371c      	adds	r7, #28
 8000552:	46bd      	mov	sp, r7
 8000554:	bd90      	pop	{r4, r7, pc}

08000556 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000556:	b580      	push	{r7, lr}
 8000558:	b086      	sub	sp, #24
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	607a      	str	r2, [r7, #4]
 8000560:	461a      	mov	r2, r3
 8000562:	460b      	mov	r3, r1
 8000564:	72fb      	strb	r3, [r7, #11]
 8000566:	4613      	mov	r3, r2
 8000568:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800056a:	7abb      	ldrb	r3, [r7, #10]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d929      	bls.n	80005c4 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fb12 	bl	8000ba0 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	7afb      	ldrb	r3, [r7, #11]
 8000582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000586:	b2db      	uxtb	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	4610      	mov	r0, r2
 800058c:	f000 fb43 	bl	8000c16 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	75fb      	strb	r3, [r7, #23]
 8000594:	e00b      	b.n	80005ae <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	f000 fb37 	bl	8000c16 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005a8:	7dfb      	ldrb	r3, [r7, #23]
 80005aa:	3301      	adds	r3, #1
 80005ac:	75fb      	strb	r3, [r7, #23]
 80005ae:	7dfa      	ldrb	r2, [r7, #23]
 80005b0:	7abb      	ldrb	r3, [r7, #10]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d3ef      	bcc.n	8000596 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2101      	movs	r1, #1
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 faef 	bl	8000ba0 <SX1278_hw_SetNSS>
 80005c2:	e000      	b.n	80005c6 <SX1278_SPIBurstWrite+0x70>
		return;
 80005c4:	bf00      	nop
	}
}
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 f90f 	bl	80007f8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005da:	200f      	movs	r0, #15
 80005dc:	f000 fb60 	bl	8000ca0 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 f919 	bl	8000818 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f103 0408 	add.w	r4, r3, #8
 80005ec:	e9d4 3400 	ldrd	r3, r4, [r4]
 80005f0:	f04f 0000 	mov.w	r0, #0
 80005f4:	f04f 0100 	mov.w	r1, #0
 80005f8:	04e1      	lsls	r1, r4, #19
 80005fa:	ea41 3153 	orr.w	r1, r1, r3, lsr #13
 80005fe:	04d8      	lsls	r0, r3, #19
 8000600:	4a6f      	ldr	r2, [pc, #444]	; (80007c0 <SX1278_config+0x1f4>)
 8000602:	f04f 0300 	mov.w	r3, #0
 8000606:	f7ff fda3 	bl	8000150 <__aeabi_uldivmod>
 800060a:	4603      	mov	r3, r0
 800060c:	460c      	mov	r4, r1
 800060e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000612:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	f04f 0400 	mov.w	r4, #0
 800061e:	0c0b      	lsrs	r3, r1, #16
 8000620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000624:	0c14      	lsrs	r4, r2, #16
 8000626:	b2db      	uxtb	r3, r3
 8000628:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800062a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	f04f 0400 	mov.w	r4, #0
 8000636:	0a0b      	lsrs	r3, r1, #8
 8000638:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800063c:	0a14      	lsrs	r4, r2, #8
 800063e:	b2db      	uxtb	r3, r3
 8000640:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000642:	7c3b      	ldrb	r3, [r7, #16]
 8000644:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	2303      	movs	r3, #3
 800064c:	2106      	movs	r1, #6
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff ff81 	bl	8000556 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000654:	2234      	movs	r2, #52	; 0x34
 8000656:	2139      	movs	r1, #57	; 0x39
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff1a 	bl	8000492 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7c1b      	ldrb	r3, [r3, #16]
 8000662:	461a      	mov	r2, r3
 8000664:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <SX1278_config+0x1f8>)
 8000666:	5c9b      	ldrb	r3, [r3, r2]
 8000668:	461a      	mov	r2, r3
 800066a:	2109      	movs	r1, #9
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff10 	bl	8000492 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000672:	220b      	movs	r2, #11
 8000674:	210b      	movs	r1, #11
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ff0b 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800067c:	2223      	movs	r2, #35	; 0x23
 800067e:	210c      	movs	r1, #12
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ff06 	bl	8000492 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7c5b      	ldrb	r3, [r3, #17]
 800068a:	461a      	mov	r2, r3
 800068c:	4b4e      	ldr	r3, [pc, #312]	; (80007c8 <SX1278_config+0x1fc>)
 800068e:	5c9b      	ldrb	r3, [r3, r2]
 8000690:	2b06      	cmp	r3, #6
 8000692:	d147      	bne.n	8000724 <SX1278_config+0x158>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	7c9b      	ldrb	r3, [r3, #18]
 8000698:	461a      	mov	r2, r3
 800069a:	4b4c      	ldr	r3, [pc, #304]	; (80007cc <SX1278_config+0x200>)
 800069c:	5c9b      	ldrb	r3, [r3, r2]
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7cdb      	ldrb	r3, [r3, #19]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <SX1278_config+0x204>)
 80006aa:	5c5b      	ldrb	r3, [r3, r1]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4413      	add	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006b4:	3301      	adds	r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	211d      	movs	r1, #29
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fee8 	bl	8000492 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7c5b      	ldrb	r3, [r3, #17]
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b3f      	ldr	r3, [pc, #252]	; (80007c8 <SX1278_config+0x1fc>)
 80006ca:	5c9b      	ldrb	r3, [r3, r2]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7d1b      	ldrb	r3, [r3, #20]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <SX1278_config+0x208>)
 80006d8:	5c5b      	ldrb	r3, [r3, r1]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4413      	add	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006e2:	3303      	adds	r3, #3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	211e      	movs	r1, #30
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff fed1 	bl	8000492 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006f0:	2131      	movs	r1, #49	; 0x31
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff feae 	bl	8000454 <SX1278_SPIRead>
 80006f8:	4603      	mov	r3, r0
 80006fa:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	f023 0307 	bic.w	r3, r3, #7
 8000702:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	f043 0305 	orr.w	r3, r3, #5
 800070a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	461a      	mov	r2, r3
 8000710:	2131      	movs	r1, #49	; 0x31
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff febd 	bl	8000492 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000718:	220c      	movs	r2, #12
 800071a:	2137      	movs	r1, #55	; 0x37
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff feb8 	bl	8000492 <SX1278_SPIWrite>
 8000722:	e029      	b.n	8000778 <SX1278_config+0x1ac>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7c9b      	ldrb	r3, [r3, #18]
 8000728:	461a      	mov	r2, r3
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SX1278_config+0x200>)
 800072c:	5c9b      	ldrb	r3, [r3, r2]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7cdb      	ldrb	r3, [r3, #19]
 8000736:	4619      	mov	r1, r3
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SX1278_config+0x204>)
 800073a:	5c5b      	ldrb	r3, [r3, r1]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000740:	4413      	add	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	211d      	movs	r1, #29
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff fea2 	bl	8000492 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7c5b      	ldrb	r3, [r3, #17]
 8000752:	461a      	mov	r2, r3
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <SX1278_config+0x1fc>)
 8000756:	5c9b      	ldrb	r3, [r3, r2]
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7d1b      	ldrb	r3, [r3, #20]
 8000760:	4619      	mov	r1, r3
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <SX1278_config+0x208>)
 8000764:	5c5b      	ldrb	r3, [r3, r1]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800076a:	4413      	add	r3, r2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	211e      	movs	r1, #30
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff fe8d 	bl	8000492 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000778:	2204      	movs	r2, #4
 800077a:	2126      	movs	r1, #38	; 0x26
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fe88 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000782:	2208      	movs	r2, #8
 8000784:	211f      	movs	r1, #31
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff fe83 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800078c:	2200      	movs	r2, #0
 800078e:	2120      	movs	r1, #32
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fe7e 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000796:	2208      	movs	r2, #8
 8000798:	2121      	movs	r1, #33	; 0x21
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff fe79 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80007a0:	2201      	movs	r2, #1
 80007a2:	2141      	movs	r1, #65	; 0x41
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fe74 	bl	8000492 <SX1278_SPIWrite>
	module->readBytes = 0;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f810 	bl	80007d8 <SX1278_standby>
}
 80007b8:	bf00      	nop
 80007ba:	371c      	adds	r7, #28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	01e84800 	.word	0x01e84800
 80007c4:	0800438c 	.word	0x0800438c
 80007c8:	08004390 	.word	0x08004390
 80007cc:	08004398 	.word	0x08004398
 80007d0:	080043a4 	.word	0x080043a4
 80007d4:	080043a8 	.word	0x080043a8

080007d8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007e0:	2209      	movs	r2, #9
 80007e2:	2101      	movs	r1, #1
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff fe54 	bl	8000492 <SX1278_SPIWrite>
	module->status = STANDBY;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2201      	movs	r2, #1
 80007ee:	759a      	strb	r2, [r3, #22]
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000800:	2208      	movs	r2, #8
 8000802:	2101      	movs	r1, #1
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff fe44 	bl	8000492 <SX1278_SPIWrite>
	module->status = SLEEP;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	759a      	strb	r2, [r3, #22]
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000820:	2288      	movs	r2, #136	; 0x88
 8000822:	2101      	movs	r1, #1
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff fe34 	bl	8000492 <SX1278_SPIWrite>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	2112      	movs	r1, #18
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fe27 	bl	8000492 <SX1278_SPIWrite>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	460b      	mov	r3, r1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	7afa      	ldrb	r2, [r7, #11]
 800085e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f7ff feb3 	bl	80005cc <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000866:	2284      	movs	r2, #132	; 0x84
 8000868:	214d      	movs	r1, #77	; 0x4d
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f7ff fe11 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000870:	22ff      	movs	r2, #255	; 0xff
 8000872:	2124      	movs	r1, #36	; 0x24
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fe0c 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800087a:	2201      	movs	r2, #1
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fe07 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000884:	223f      	movs	r2, #63	; 0x3f
 8000886:	2111      	movs	r1, #17
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f7ff fe02 	bl	8000492 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f7ff ffcf 	bl	8000832 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	461a      	mov	r2, r3
 8000898:	2122      	movs	r1, #34	; 0x22
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fdf9 	bl	8000492 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80008a0:	210f      	movs	r1, #15
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff fdd6 	bl	8000454 <SX1278_SPIRead>
 80008a8:	4603      	mov	r3, r0
 80008aa:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	461a      	mov	r2, r3
 80008b0:	210d      	movs	r1, #13
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f7ff fded 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80008b8:	228d      	movs	r2, #141	; 0x8d
 80008ba:	2101      	movs	r1, #1
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff fde8 	bl	8000492 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008ca:	2118      	movs	r1, #24
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f7ff fdc1 	bl	8000454 <SX1278_SPIRead>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d104      	bne.n	80008e6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2203      	movs	r2, #3
 80008e0:	759a      	strb	r2, [r3, #22]
			return 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e013      	b.n	800090e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d109      	bne.n	8000906 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f969 	bl	8000bce <SX1278_hw_Reset>
			SX1278_config(module);
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff fe65 	bl	80005cc <SX1278_config>
			return 0;
 8000902:	2300      	movs	r3, #0
 8000904:	e003      	b.n	800090e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000906:	2001      	movs	r0, #1
 8000908:	f000 f9ca 	bl	8000ca0 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800090c:	e7dd      	b.n	80008ca <SX1278_LoRaEntryRx+0x7e>
	}
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f9c7 	bl	8000cb6 <SX1278_hw_GetDIO0>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d030      	beq.n	8000990 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3317      	adds	r3, #23
 8000932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fb5e 	bl	8002ffa <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800093e:	2110      	movs	r1, #16
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fd87 	bl	8000454 <SX1278_SPIRead>
 8000946:	4603      	mov	r3, r0
 8000948:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800094a:	7bbb      	ldrb	r3, [r7, #14]
 800094c:	461a      	mov	r2, r3
 800094e:	210d      	movs	r1, #13
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fd9e 	bl	8000492 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7c5b      	ldrb	r3, [r3, #17]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7d5b      	ldrb	r3, [r3, #21]
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e005      	b.n	8000972 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000966:	2113      	movs	r1, #19
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff fd73 	bl	8000454 <SX1278_SPIRead>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f103 0217 	add.w	r2, r3, #23
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	2100      	movs	r1, #0
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fdb1 	bl	80004e4 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7bfa      	ldrb	r2, [r7, #15]
 8000986:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ff51 	bl	8000832 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	460b      	mov	r3, r1
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	7afa      	ldrb	r2, [r7, #11]
 80009b0:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f7ff fe0a 	bl	80005cc <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80009b8:	2287      	movs	r2, #135	; 0x87
 80009ba:	214d      	movs	r1, #77	; 0x4d
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff fd68 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009c2:	2200      	movs	r2, #0
 80009c4:	2124      	movs	r1, #36	; 0x24
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff fd63 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009cc:	2241      	movs	r2, #65	; 0x41
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd5e 	bl	8000492 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f7ff ff2b 	bl	8000832 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009dc:	22f7      	movs	r2, #247	; 0xf7
 80009de:	2111      	movs	r1, #17
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff fd56 	bl	8000492 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009e6:	7afb      	ldrb	r3, [r7, #11]
 80009e8:	461a      	mov	r2, r3
 80009ea:	2122      	movs	r1, #34	; 0x22
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff fd50 	bl	8000492 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009f2:	210e      	movs	r1, #14
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fd2d 	bl	8000454 <SX1278_SPIRead>
 80009fa:	4603      	mov	r3, r0
 80009fc:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
 8000a00:	461a      	mov	r2, r3
 8000a02:	210d      	movs	r1, #13
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff fd44 	bl	8000492 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000a0a:	2122      	movs	r1, #34	; 0x22
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fd21 	bl	8000454 <SX1278_SPIRead>
 8000a12:	4603      	mov	r3, r0
 8000a14:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000a16:	7dba      	ldrb	r2, [r7, #22]
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d104      	bne.n	8000a28 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2202      	movs	r2, #2
 8000a22:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e00e      	b.n	8000a46 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1ea      	bne.n	8000a0a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f8c8 	bl	8000bce <SX1278_hw_Reset>
			SX1278_config(module);
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff fdc4 	bl	80005cc <SX1278_config>
			return 0;
 8000a44:	2300      	movs	r3, #0
		}
	}
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	2100      	movs	r1, #0
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff fd76 	bl	8000556 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a6a:	228b      	movs	r2, #139	; 0x8b
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f7ff fd0f 	bl	8000492 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 f91c 	bl	8000cb6 <SX1278_hw_GetDIO0>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00b      	beq.n	8000a9c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a84:	2112      	movs	r1, #18
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff fce4 	bl	8000454 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f7ff fed0 	bl	8000832 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f7ff fea0 	bl	80007d8 <SX1278_standby>
			return 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e013      	b.n	8000ac4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d109      	bne.n	8000abc <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f88e 	bl	8000bce <SX1278_hw_Reset>
			SX1278_config(module);
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fd8a 	bl	80005cc <SX1278_config>
			return 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e003      	b.n	8000ac4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f000 f8ef 	bl	8000ca0 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000ac2:	e7d7      	b.n	8000a74 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f84a 	bl	8000b76 <SX1278_hw_init>
	module->frequency = frequency;
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ae8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	module->power = power;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000af2:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000afa:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b02:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b0a:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b12:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000b1a:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff fd55 	bl	80005cc <SX1278_config>
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd90      	pop	{r4, r7, pc}

08000b2a <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b084      	sub	sp, #16
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d003      	beq.n	8000b4c <SX1278_read+0x22>
		length = module->readBytes;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b4a:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3317      	adds	r3, #23
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	4619      	mov	r1, r3
 8000b54:	68b8      	ldr	r0, [r7, #8]
 8000b56:	f002 fa45 	bl	8002fe4 <memcpy>
	rxBuf[length] = '\0';
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	4413      	add	r3, r2
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f80d 	bl	8000ba0 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6858      	ldr	r0, [r3, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	2201      	movs	r2, #1
 8000b92:	4619      	mov	r1, r3
 8000b94:	f000 fff9 	bl	8001b8a <HAL_GPIO_WritePin>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6958      	ldr	r0, [r3, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	b299      	uxth	r1, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	bf0c      	ite	eq
 8000bba:	2301      	moveq	r3, #1
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	f000 ffe2 	bl	8001b8a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffe1 	bl	8000ba0 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6858      	ldr	r0, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	4619      	mov	r1, r3
 8000bec:	f000 ffcd 	bl	8001b8a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 f855 	bl	8000ca0 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6858      	ldr	r0, [r3, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	2201      	movs	r2, #1
 8000c02:	4619      	mov	r1, r3
 8000c04:	f000 ffc1 	bl	8001b8a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000c08:	2064      	movs	r0, #100	; 0x64
 8000c0a:	f000 f849 	bl	8000ca0 <SX1278_hw_DelayMs>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c22:	2100      	movs	r1, #0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffbb 	bl	8000ba0 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6998      	ldr	r0, [r3, #24]
 8000c2e:	1cf9      	adds	r1, r7, #3
 8000c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c34:	2201      	movs	r2, #1
 8000c36:	f001 fc61 	bl	80024fc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c3a:	bf00      	nop
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 ff39 	bl	8002ab8 <HAL_SPI_GetState>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d1f7      	bne.n	8000c3c <SX1278_hw_SPICommand+0x26>
		;
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c64:	2100      	movs	r1, #0
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff9a 	bl	8000ba0 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6998      	ldr	r0, [r3, #24]
 8000c70:	f107 020e 	add.w	r2, r7, #14
 8000c74:	f107 010f 	add.w	r1, r7, #15
 8000c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	f001 fd78 	bl	8002774 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c84:	bf00      	nop
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 ff14 	bl	8002ab8 <HAL_SPI_GetState>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d1f7      	bne.n	8000c86 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 fcf7 	bl	800169c <HAL_Delay>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4610      	mov	r0, r2
 8000ccc:	f000 ff46 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	bf0c      	ite	eq
 8000cd6:	2301      	moveq	r3, #1
 8000cd8:	2300      	movne	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cf0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d013      	beq.n	8000d24 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d00:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d04:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00b      	beq.n	8000d24 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d0c:	e000      	b.n	8000d10 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d0e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f9      	beq.n	8000d0e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <_write>:
static void MX_USART2_UART_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

int _write(int file, char *ptr, int len) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	2332      	movs	r3, #50	; 0x32
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <_write+0x48>)
 8000d46:	f001 ffb8 	bl	8002cba <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e009      	b.n	8000d64 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ffc3 	bl	8000ce4 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf1      	blt.n	8000d50 <_write+0x20>
	}
	return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200002f8 	.word	0x200002f8
 8000d7c:	00000000 	.word	0x00000000

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 fc27 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f971 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 fa0b 	bl	80011a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d92:	f000 f9df 	bl	8001154 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000d96:	f000 f9a7 	bl	80010e8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8000d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9e:	4898      	ldr	r0, [pc, #608]	; (8001000 <main+0x280>)
 8000da0:	f000 fedc 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b96      	ldr	r3, [pc, #600]	; (8001004 <main+0x284>)
 8000daa:	601a      	str	r2, [r3, #0]
	if (master == 1) {
 8000dac:	4b95      	ldr	r3, [pc, #596]	; (8001004 <main+0x284>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d109      	bne.n	8000dc8 <main+0x48>
		printf("Mode: Master\r\n");
 8000db4:	4894      	ldr	r0, [pc, #592]	; (8001008 <main+0x288>)
 8000db6:	f002 f99d 	bl	80030f4 <puts>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc0:	488f      	ldr	r0, [pc, #572]	; (8001000 <main+0x280>)
 8000dc2:	f000 fee2 	bl	8001b8a <HAL_GPIO_WritePin>
 8000dc6:	e008      	b.n	8000dda <main+0x5a>
	} else {
		printf("Mode: Slave\r\n");
 8000dc8:	4890      	ldr	r0, [pc, #576]	; (800100c <main+0x28c>)
 8000dca:	f002 f993 	bl	80030f4 <puts>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd4:	488a      	ldr	r0, [pc, #552]	; (8001000 <main+0x280>)
 8000dd6:	f000 fed8 	bl	8001b8a <HAL_GPIO_WritePin>
	}

	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000dda:	4b8d      	ldr	r3, [pc, #564]	; (8001010 <main+0x290>)
 8000ddc:	4a8d      	ldr	r2, [pc, #564]	; (8001014 <main+0x294>)
 8000dde:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000de0:	4b8b      	ldr	r3, [pc, #556]	; (8001010 <main+0x290>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000de6:	4b8a      	ldr	r3, [pc, #552]	; (8001010 <main+0x290>)
 8000de8:	4a8b      	ldr	r2, [pc, #556]	; (8001018 <main+0x298>)
 8000dea:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000dec:	4b88      	ldr	r3, [pc, #544]	; (8001010 <main+0x290>)
 8000dee:	2210      	movs	r2, #16
 8000df0:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8000df2:	4b87      	ldr	r3, [pc, #540]	; (8001010 <main+0x290>)
 8000df4:	4a87      	ldr	r2, [pc, #540]	; (8001014 <main+0x294>)
 8000df6:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8000df8:	4b85      	ldr	r3, [pc, #532]	; (8001010 <main+0x290>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi2;
 8000dfe:	4b84      	ldr	r3, [pc, #528]	; (8001010 <main+0x290>)
 8000e00:	4a86      	ldr	r2, [pc, #536]	; (800101c <main+0x29c>)
 8000e02:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 8000e04:	4b86      	ldr	r3, [pc, #536]	; (8001020 <main+0x2a0>)
 8000e06:	4a82      	ldr	r2, [pc, #520]	; (8001010 <main+0x290>)
 8000e08:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 8000e0a:	4886      	ldr	r0, [pc, #536]	; (8001024 <main+0x2a4>)
 8000e0c:	f002 f972 	bl	80030f4 <puts>
	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000e10:	230a      	movs	r3, #10
 8000e12:	9305      	str	r3, [sp, #20]
 8000e14:	2300      	movs	r3, #0
 8000e16:	9304      	str	r3, [sp, #16]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9303      	str	r3, [sp, #12]
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	9302      	str	r3, [sp, #8]
 8000e20:	2301      	movs	r3, #1
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	2301      	movs	r3, #1
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	a373      	add	r3, pc, #460	; (adr r3, 8000ff8 <main+0x278>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	487c      	ldr	r0, [pc, #496]	; (8001020 <main+0x2a0>)
 8000e30:	f7ff fe4c 	bl	8000acc <SX1278_init>
	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
	printf("Done configuring LoRaModule\r\n");
 8000e34:	487c      	ldr	r0, [pc, #496]	; (8001028 <main+0x2a8>)
 8000e36:	f002 f95d 	bl	80030f4 <puts>

	if (master == 1) {
 8000e3a:	4b72      	ldr	r3, [pc, #456]	; (8001004 <main+0x284>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d10e      	bne.n	8000e60 <main+0xe0>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000e42:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e46:	2110      	movs	r1, #16
 8000e48:	4875      	ldr	r0, [pc, #468]	; (8001020 <main+0x2a0>)
 8000e4a:	f7ff fda8 	bl	800099e <SX1278_LoRaEntryTx>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	4b76      	ldr	r3, [pc, #472]	; (800102c <main+0x2ac>)
 8000e52:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2120      	movs	r1, #32
 8000e58:	486f      	ldr	r0, [pc, #444]	; (8001018 <main+0x298>)
 8000e5a:	f000 fe96 	bl	8001b8a <HAL_GPIO_WritePin>
 8000e5e:	e00d      	b.n	8000e7c <main+0xfc>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000e60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e64:	2110      	movs	r1, #16
 8000e66:	486e      	ldr	r0, [pc, #440]	; (8001020 <main+0x2a0>)
 8000e68:	f7ff fcf0 	bl	800084c <SX1278_LoRaEntryRx>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	4b6f      	ldr	r3, [pc, #444]	; (800102c <main+0x2ac>)
 8000e70:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2120      	movs	r1, #32
 8000e76:	4868      	ldr	r0, [pc, #416]	; (8001018 <main+0x298>)
 8000e78:	f000 fe87 	bl	8001b8a <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (master == 1) {
 8000e7c:	4b61      	ldr	r3, [pc, #388]	; (8001004 <main+0x284>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d144      	bne.n	8000f0e <main+0x18e>
			printf("Master ...\r\n");
 8000e84:	486a      	ldr	r0, [pc, #424]	; (8001030 <main+0x2b0>)
 8000e86:	f002 f935 	bl	80030f4 <puts>
			HAL_Delay(1000);
 8000e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8e:	f000 fc05 	bl	800169c <HAL_Delay>
			printf("Sending package...\r\n");
 8000e92:	4868      	ldr	r0, [pc, #416]	; (8001034 <main+0x2b4>)
 8000e94:	f002 f92e 	bl	80030f4 <puts>

			message_length = sprintf(buffer, "Hello %d", message);
 8000e98:	4b67      	ldr	r3, [pc, #412]	; (8001038 <main+0x2b8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4967      	ldr	r1, [pc, #412]	; (800103c <main+0x2bc>)
 8000ea0:	4867      	ldr	r0, [pc, #412]	; (8001040 <main+0x2c0>)
 8000ea2:	f002 f92f 	bl	8003104 <siprintf>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	4b66      	ldr	r3, [pc, #408]	; (8001044 <main+0x2c4>)
 8000eaa:	601a      	str	r2, [r3, #0]
			ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000eac:	4b65      	ldr	r3, [pc, #404]	; (8001044 <main+0x2c4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4859      	ldr	r0, [pc, #356]	; (8001020 <main+0x2a0>)
 8000eba:	f7ff fd70 	bl	800099e <SX1278_LoRaEntryTx>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	4b5a      	ldr	r3, [pc, #360]	; (800102c <main+0x2ac>)
 8000ec2:	601a      	str	r2, [r3, #0]
			printf("Entry: %d\r\n", ret);
 8000ec4:	4b59      	ldr	r3, [pc, #356]	; (800102c <main+0x2ac>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	485f      	ldr	r0, [pc, #380]	; (8001048 <main+0x2c8>)
 8000ecc:	f002 f89e 	bl	800300c <iprintf>

			printf("Sending %s\r\n", buffer);
 8000ed0:	495b      	ldr	r1, [pc, #364]	; (8001040 <main+0x2c0>)
 8000ed2:	485e      	ldr	r0, [pc, #376]	; (800104c <main+0x2cc>)
 8000ed4:	f002 f89a 	bl	800300c <iprintf>
			ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 8000ed8:	4b5a      	ldr	r3, [pc, #360]	; (8001044 <main+0x2c4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ee2:	4957      	ldr	r1, [pc, #348]	; (8001040 <main+0x2c0>)
 8000ee4:	484e      	ldr	r0, [pc, #312]	; (8001020 <main+0x2a0>)
 8000ee6:	f7ff fdb2 	bl	8000a4e <SX1278_LoRaTxPacket>
 8000eea:	4602      	mov	r2, r0
 8000eec:	4b4f      	ldr	r3, [pc, #316]	; (800102c <main+0x2ac>)
 8000eee:	601a      	str	r2, [r3, #0]
					message_length, 2000);
			message += 1;
 8000ef0:	4b51      	ldr	r3, [pc, #324]	; (8001038 <main+0x2b8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a50      	ldr	r2, [pc, #320]	; (8001038 <main+0x2b8>)
 8000ef8:	6013      	str	r3, [r2, #0]

			printf("Transmission: %d\r\n", ret);
 8000efa:	4b4c      	ldr	r3, [pc, #304]	; (800102c <main+0x2ac>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4853      	ldr	r0, [pc, #332]	; (8001050 <main+0x2d0>)
 8000f02:	f002 f883 	bl	800300c <iprintf>
			printf("Package sent...\r\n");
 8000f06:	4853      	ldr	r0, [pc, #332]	; (8001054 <main+0x2d4>)
 8000f08:	f002 f8f4 	bl	80030f4 <puts>
 8000f0c:	e02c      	b.n	8000f68 <main+0x1e8>

		} else {
			printf("Slave ...\r\n");
 8000f0e:	4852      	ldr	r0, [pc, #328]	; (8001058 <main+0x2d8>)
 8000f10:	f002 f8f0 	bl	80030f4 <puts>
			HAL_Delay(800);
 8000f14:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f18:	f000 fbc0 	bl	800169c <HAL_Delay>
			printf("Receiving package...\r\n");
 8000f1c:	484f      	ldr	r0, [pc, #316]	; (800105c <main+0x2dc>)
 8000f1e:	f002 f8e9 	bl	80030f4 <puts>

			ret = SX1278_LoRaRxPacket(&SX1278);
 8000f22:	483f      	ldr	r0, [pc, #252]	; (8001020 <main+0x2a0>)
 8000f24:	f7ff fcf7 	bl	8000916 <SX1278_LoRaRxPacket>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b3f      	ldr	r3, [pc, #252]	; (800102c <main+0x2ac>)
 8000f2e:	601a      	str	r2, [r3, #0]
			printf("Received: %d\r\n", ret);
 8000f30:	4b3e      	ldr	r3, [pc, #248]	; (800102c <main+0x2ac>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	484a      	ldr	r0, [pc, #296]	; (8001060 <main+0x2e0>)
 8000f38:	f002 f868 	bl	800300c <iprintf>
			if (ret > 0) {
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <main+0x2ac>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dd0e      	ble.n	8000f62 <main+0x1e2>
				SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <main+0x2ac>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	493c      	ldr	r1, [pc, #240]	; (8001040 <main+0x2c0>)
 8000f4e:	4834      	ldr	r0, [pc, #208]	; (8001020 <main+0x2a0>)
 8000f50:	f7ff fdeb 	bl	8000b2a <SX1278_read>
				printf("Content (%d): %s\r\n", ret, buffer);
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <main+0x2ac>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a39      	ldr	r2, [pc, #228]	; (8001040 <main+0x2c0>)
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4841      	ldr	r0, [pc, #260]	; (8001064 <main+0x2e4>)
 8000f5e:	f002 f855 	bl	800300c <iprintf>
			}
			printf("Package received ...\r\n");
 8000f62:	4841      	ldr	r0, [pc, #260]	; (8001068 <main+0x2e8>)
 8000f64:	f002 f8c6 	bl	80030f4 <puts>

		}

		//change mode
		if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin)) {
 8000f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6c:	4824      	ldr	r0, [pc, #144]	; (8001000 <main+0x280>)
 8000f6e:	f000 fdf5 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d181      	bne.n	8000e7c <main+0xfc>
			printf("Changing mode\r\n");
 8000f78:	483c      	ldr	r0, [pc, #240]	; (800106c <main+0x2ec>)
 8000f7a:	f002 f8bb 	bl	80030f4 <puts>
			master = ~master & 0x01;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <main+0x284>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf0c      	ite	eq
 8000f8a:	2301      	moveq	r3, #1
 8000f8c:	2300      	movne	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <main+0x284>)
 8000f94:	601a      	str	r2, [r3, #0]
			if (master == 1) {
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <main+0x284>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d10e      	bne.n	8000fbc <main+0x23c>
				ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000f9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	481e      	ldr	r0, [pc, #120]	; (8001020 <main+0x2a0>)
 8000fa6:	f7ff fcfa 	bl	800099e <SX1278_LoRaEntryTx>
 8000faa:	4602      	mov	r2, r0
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <main+0x2ac>)
 8000fae:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <main+0x298>)
 8000fb6:	f000 fde8 	bl	8001b8a <HAL_GPIO_WritePin>
 8000fba:	e00d      	b.n	8000fd8 <main+0x258>
			} else {
				ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000fbc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	4817      	ldr	r0, [pc, #92]	; (8001020 <main+0x2a0>)
 8000fc4:	f7ff fc42 	bl	800084c <SX1278_LoRaEntryRx>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <main+0x2ac>)
 8000fcc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4811      	ldr	r0, [pc, #68]	; (8001018 <main+0x298>)
 8000fd4:	f000 fdd9 	bl	8001b8a <HAL_GPIO_WritePin>
			}
			HAL_Delay(1000);
 8000fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fdc:	f000 fb5e 	bl	800169c <HAL_Delay>
			while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin))
 8000fe0:	bf00      	nop
 8000fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <main+0x280>)
 8000fe8:	f000 fdb8 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0f7      	beq.n	8000fe2 <main+0x262>
		if (master == 1) {
 8000ff2:	e743      	b.n	8000e7c <main+0xfc>
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	19de5080 	.word	0x19de5080
 8000ffc:	00000000 	.word	0x00000000
 8001000:	40011000 	.word	0x40011000
 8001004:	20000478 	.word	0x20000478
 8001008:	0800423c 	.word	0x0800423c
 800100c:	0800424c 	.word	0x0800424c
 8001010:	2000045c 	.word	0x2000045c
 8001014:	40010c00 	.word	0x40010c00
 8001018:	40010800 	.word	0x40010800
 800101c:	20000098 	.word	0x20000098
 8001020:	20000340 	.word	0x20000340
 8001024:	0800425c 	.word	0x0800425c
 8001028:	08004278 	.word	0x08004278
 800102c:	20000458 	.word	0x20000458
 8001030:	08004298 	.word	0x08004298
 8001034:	080042a4 	.word	0x080042a4
 8001038:	200000f4 	.word	0x200000f4
 800103c:	080042b8 	.word	0x080042b8
 8001040:	200000f8 	.word	0x200000f8
 8001044:	200000f0 	.word	0x200000f0
 8001048:	080042c4 	.word	0x080042c4
 800104c:	080042d0 	.word	0x080042d0
 8001050:	080042e0 	.word	0x080042e0
 8001054:	080042f4 	.word	0x080042f4
 8001058:	08004308 	.word	0x08004308
 800105c:	08004314 	.word	0x08004314
 8001060:	0800432c 	.word	0x0800432c
 8001064:	0800433c 	.word	0x0800433c
 8001068:	08004350 	.word	0x08004350
 800106c:	08004368 	.word	0x08004368

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b090      	sub	sp, #64	; 0x40
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	2228      	movs	r2, #40	; 0x28
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f001 ffbb 	bl	8002ffa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001096:	2301      	movs	r3, #1
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109a:	2310      	movs	r3, #16
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800109e:	2300      	movs	r3, #0
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a2:	f107 0318 	add.w	r3, r7, #24
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fd88 	bl	8001bbc <HAL_RCC_OscConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010b2:	f000 f8eb 	bl	800128c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	230f      	movs	r3, #15
 80010b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fff4 	bl	80020bc <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010da:	f000 f8d7 	bl	800128c <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3740      	adds	r7, #64	; 0x40
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_SPI2_Init+0x64>)
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <MX_SPI2_Init+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_SPI2_Init+0x64>)
 80010f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_SPI2_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_SPI2_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_SPI2_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_SPI2_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_SPI2_Init+0x64>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_SPI2_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_SPI2_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_SPI2_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_SPI2_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_SPI2_Init+0x64>)
 8001134:	220a      	movs	r2, #10
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_SPI2_Init+0x64>)
 800113a:	f001 f95b 	bl	80023f4 <HAL_SPI_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001144:	f000 f8a2 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000098 	.word	0x20000098
 8001150:	40003800 	.word	0x40003800

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART2_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001160:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800118c:	f001 fd48 	bl	8002c20 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001196:	f000 f879 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200002f8 	.word	0x200002f8
 80011a4:	40004400 	.word	0x40004400

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <MX_GPIO_Init+0xd4>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a2e      	ldr	r2, [pc, #184]	; (800127c <MX_GPIO_Init+0xd4>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b2c      	ldr	r3, [pc, #176]	; (800127c <MX_GPIO_Init+0xd4>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <MX_GPIO_Init+0xd4>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <MX_GPIO_Init+0xd4>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_GPIO_Init+0xd4>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_GPIO_Init+0xd4>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a22      	ldr	r2, [pc, #136]	; (800127c <MX_GPIO_Init+0xd4>)
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_GPIO_Init+0xd4>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2102      	movs	r1, #2
 8001208:	481d      	ldr	r0, [pc, #116]	; (8001280 <MX_GPIO_Init+0xd8>)
 800120a:	f000 fcbe 	bl	8001b8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 800120e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	4818      	ldr	r0, [pc, #96]	; (8001284 <MX_GPIO_Init+0xdc>)
 8001224:	f000 fb40 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin LED_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|LED_Pin;
 8001228:	2330      	movs	r3, #48	; 0x30
 800122a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_GPIO_Init+0xe0>)
 800123c:	f000 fb34 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001240:	2301      	movs	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4619      	mov	r1, r3
 8001252:	480b      	ldr	r0, [pc, #44]	; (8001280 <MX_GPIO_Init+0xd8>)
 8001254:	f000 fb28 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001258:	2302      	movs	r3, #2
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2302      	movs	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0xd8>)
 8001270:	f000 fb1a 	bl	80018a8 <HAL_GPIO_Init>

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40011000 	.word	0x40011000
 8001288:	40010800 	.word	0x40010800

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x4>
	...

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_MspInit+0x60>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_MspInit+0x60>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000

080012f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d131      	bne.n	800137c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_SPI_MspInit+0x90>)
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <HAL_SPI_MspInit+0x90>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001322:	61d3      	str	r3, [r2, #28]
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_SPI_MspInit+0x90>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_SPI_MspInit+0x90>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_SPI_MspInit+0x90>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_SPI_MspInit+0x90>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001348:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800134c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	4619      	mov	r1, r3
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <HAL_SPI_MspInit+0x94>)
 800135e:	f000 faa3 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_SPI_MspInit+0x94>)
 8001378:	f000 fa96 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40003800 	.word	0x40003800
 8001388:	40021000 	.word	0x40021000
 800138c:	40010c00 	.word	0x40010c00

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_UART_MspInit+0x88>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d12f      	bne.n	8001410 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ba:	61d3      	str	r3, [r2, #28]
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a13      	ldr	r2, [pc, #76]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e0:	2304      	movs	r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <HAL_UART_MspInit+0x90>)
 80013f4:	f000 fa58 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013f8:	2308      	movs	r3, #8
 80013fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4619      	mov	r1, r3
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_UART_MspInit+0x90>)
 800140c:	f000 fa4c 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40004400 	.word	0x40004400
 800141c:	40021000 	.word	0x40021000
 8001420:	40010800 	.word	0x40010800

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <HardFault_Handler+0x4>

08001436 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <MemManage_Handler+0x4>

0800143c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <BusFault_Handler+0x4>

08001442 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <UsageFault_Handler+0x4>

08001448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f8f8 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	e00a      	b.n	80014a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800148a:	f3af 8000 	nop.w
 800148e:	4601      	mov	r1, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbf0      	blt.n	800148a <_read+0x12>
	}

return len;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d8:	605a      	str	r2, [r3, #4]
	return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <_isatty>:

int _isatty(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
	return 0;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
	...

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f001 fd24 	bl	8002f90 <__errno>
 8001548:	4602      	mov	r2, r0
 800154a:	230c      	movs	r3, #12
 800154c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20005000 	.word	0x20005000
 8001574:	00000400 	.word	0x00000400
 8001578:	2000008c 	.word	0x2000008c
 800157c:	20000488 	.word	0x20000488

08001580 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	; (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015b2:	f7ff ffe5 	bl	8001580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f001 fcf1 	bl	8002f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ba:	f7ff fbe1 	bl	8000d80 <main>
  bx lr
 80015be:	4770      	bx	lr
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015c8:	0800446c 	.word	0x0800446c
  ldr r2, =_sbss
 80015cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015d0:	20000484 	.word	0x20000484

080015d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC1_2_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_Init+0x28>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_Init+0x28>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f000 f929 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f808 	bl	8001604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fe4e 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40022000 	.word	0x40022000

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x54>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x58>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	fbb3 f3f1 	udiv	r3, r3, r1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f933 	bl	800188e <HAL_SYSTICK_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00e      	b.n	8001650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d80a      	bhi.n	800164e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 f909 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_InitTick+0x5c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	20000008 	.word	0x20000008
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_IncTick+0x1c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_IncTick+0x20>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a03      	ldr	r2, [pc, #12]	; (8001684 <HAL_IncTick+0x20>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	20000008 	.word	0x20000008
 8001684:	2000047c 	.word	0x2000047c

08001688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <HAL_GetTick+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	2000047c 	.word	0x2000047c

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff fff0 	bl	8001688 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_Delay+0x40>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffe0 	bl	8001688 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000008 	.word	0x20000008

080016e0 <__NVIC_SetPriorityGrouping>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_SetPriority>:
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <SysTick_Config>:
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff90 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff49 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff5e 	bl	8001728 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffb0 	bl	80017fc <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b08b      	sub	sp, #44	; 0x2c
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	e127      	b.n	8001b0c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018bc:	2201      	movs	r2, #1
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8116 	bne.w	8001b06 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d034      	beq.n	800194c <HAL_GPIO_Init+0xa4>
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d80d      	bhi.n	8001902 <HAL_GPIO_Init+0x5a>
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d02b      	beq.n	8001942 <HAL_GPIO_Init+0x9a>
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d804      	bhi.n	80018f8 <HAL_GPIO_Init+0x50>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d031      	beq.n	8001956 <HAL_GPIO_Init+0xae>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d01c      	beq.n	8001930 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018f6:	e048      	b.n	800198a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d043      	beq.n	8001984 <HAL_GPIO_Init+0xdc>
 80018fc:	2b11      	cmp	r3, #17
 80018fe:	d01b      	beq.n	8001938 <HAL_GPIO_Init+0x90>
          break;
 8001900:	e043      	b.n	800198a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001902:	4a89      	ldr	r2, [pc, #548]	; (8001b28 <HAL_GPIO_Init+0x280>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d026      	beq.n	8001956 <HAL_GPIO_Init+0xae>
 8001908:	4a87      	ldr	r2, [pc, #540]	; (8001b28 <HAL_GPIO_Init+0x280>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d806      	bhi.n	800191c <HAL_GPIO_Init+0x74>
 800190e:	4a87      	ldr	r2, [pc, #540]	; (8001b2c <HAL_GPIO_Init+0x284>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d020      	beq.n	8001956 <HAL_GPIO_Init+0xae>
 8001914:	4a86      	ldr	r2, [pc, #536]	; (8001b30 <HAL_GPIO_Init+0x288>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d01d      	beq.n	8001956 <HAL_GPIO_Init+0xae>
          break;
 800191a:	e036      	b.n	800198a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800191c:	4a85      	ldr	r2, [pc, #532]	; (8001b34 <HAL_GPIO_Init+0x28c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d019      	beq.n	8001956 <HAL_GPIO_Init+0xae>
 8001922:	4a85      	ldr	r2, [pc, #532]	; (8001b38 <HAL_GPIO_Init+0x290>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d016      	beq.n	8001956 <HAL_GPIO_Init+0xae>
 8001928:	4a84      	ldr	r2, [pc, #528]	; (8001b3c <HAL_GPIO_Init+0x294>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0xae>
          break;
 800192e:	e02c      	b.n	800198a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e028      	b.n	800198a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	3304      	adds	r3, #4
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e023      	b.n	800198a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	3308      	adds	r3, #8
 8001948:	623b      	str	r3, [r7, #32]
          break;
 800194a:	e01e      	b.n	800198a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	330c      	adds	r3, #12
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e019      	b.n	800198a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800195e:	2304      	movs	r3, #4
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e012      	b.n	800198a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800196c:	2308      	movs	r3, #8
 800196e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	611a      	str	r2, [r3, #16]
          break;
 8001976:	e008      	b.n	800198a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001978:	2308      	movs	r3, #8
 800197a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	615a      	str	r2, [r3, #20]
          break;
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
          break;
 8001988:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2bff      	cmp	r3, #255	; 0xff
 800198e:	d801      	bhi.n	8001994 <HAL_GPIO_Init+0xec>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	e001      	b.n	8001998 <HAL_GPIO_Init+0xf0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2bff      	cmp	r3, #255	; 0xff
 800199e:	d802      	bhi.n	80019a6 <HAL_GPIO_Init+0xfe>
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_Init+0x104>
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	3b08      	subs	r3, #8
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	210f      	movs	r1, #15
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	401a      	ands	r2, r3
 80019be:	6a39      	ldr	r1, [r7, #32]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	431a      	orrs	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8096 	beq.w	8001b06 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019da:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_GPIO_Init+0x298>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	4a58      	ldr	r2, [pc, #352]	; (8001b40 <HAL_GPIO_Init+0x298>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6193      	str	r3, [r2, #24]
 80019e6:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <HAL_GPIO_Init+0x298>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f2:	4a54      	ldr	r2, [pc, #336]	; (8001b44 <HAL_GPIO_Init+0x29c>)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <HAL_GPIO_Init+0x2a0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x19e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <HAL_GPIO_Init+0x2a4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x19a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a49      	ldr	r2, [pc, #292]	; (8001b50 <HAL_GPIO_Init+0x2a8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x196>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a48      	ldr	r2, [pc, #288]	; (8001b54 <HAL_GPIO_Init+0x2ac>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x192>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x1a0>
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x1a0>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x1a0>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x1a0>
 8001a46:	2300      	movs	r3, #0
 8001a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a58:	493a      	ldr	r1, [pc, #232]	; (8001b44 <HAL_GPIO_Init+0x29c>)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4938      	ldr	r1, [pc, #224]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
 8001a7e:	e006      	b.n	8001a8e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a80:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	4933      	ldr	r1, [pc, #204]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	492e      	ldr	r1, [pc, #184]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
 8001aa6:	e006      	b.n	8001ab6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	4929      	ldr	r1, [pc, #164]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	4924      	ldr	r1, [pc, #144]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
 8001ace:	e006      	b.n	8001ade <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	491f      	ldr	r1, [pc, #124]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	491a      	ldr	r1, [pc, #104]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60cb      	str	r3, [r1, #12]
 8001af6:	e006      	b.n	8001b06 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4915      	ldr	r1, [pc, #84]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	3301      	adds	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f aed0 	bne.w	80018bc <HAL_GPIO_Init+0x14>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	372c      	adds	r7, #44	; 0x2c
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	10210000 	.word	0x10210000
 8001b2c:	10110000 	.word	0x10110000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10310000 	.word	0x10310000
 8001b38:	10320000 	.word	0x10320000
 8001b3c:	10220000 	.word	0x10220000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40010800 	.word	0x40010800
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40011000 	.word	0x40011000
 8001b54:	40011400 	.word	0x40011400
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba0:	887a      	ldrh	r2, [r7, #2]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	041a      	lsls	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	611a      	str	r2, [r3, #16]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e26c      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bdc:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be8:	4b8f      	ldr	r3, [pc, #572]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d112      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
 8001bf4:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c02:	4b89      	ldr	r3, [pc, #548]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d06c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d168      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e246      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x76>
 8001c24:	4b80      	ldr	r3, [pc, #512]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a7f      	ldr	r2, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e02e      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x98>
 8001c3a:	4b7b      	ldr	r3, [pc, #492]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a7a      	ldr	r2, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b78      	ldr	r3, [pc, #480]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a77      	ldr	r2, [pc, #476]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0xbc>
 8001c5e:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a71      	ldr	r2, [pc, #452]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c78:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fcf6 	bl	8001688 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fcf2 	bl	8001688 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1fa      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe4>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fce2 	bl	8001688 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fcde 	bl	8001688 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1e6      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x10c>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d02:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
 8001d0e:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1ba      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4939      	ldr	r1, [pc, #228]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fc97 	bl	8001688 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fc93 	bl	8001688 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e19b      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4927      	ldr	r1, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fc76 	bl	8001688 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fc72 	bl	8001688 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e17a      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03a      	beq.n	8001e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d019      	beq.n	8001e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fc56 	bl	8001688 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff fc52 	bl	8001688 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e15a      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f000 fada 	bl	80023b8 <RCC_Delay>
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fc3c 	bl	8001688 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff fc38 	bl	8001688 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d908      	bls.n	8001e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e140      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	42420000 	.word	0x42420000
 8001e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b9e      	ldr	r3, [pc, #632]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e9      	bne.n	8001e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a6 	beq.w	8001f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4b97      	ldr	r3, [pc, #604]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4b94      	ldr	r3, [pc, #592]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a93      	ldr	r2, [pc, #588]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b8e      	ldr	r3, [pc, #568]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b8b      	ldr	r3, [pc, #556]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a8a      	ldr	r2, [pc, #552]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fbf9 	bl	8001688 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7ff fbf5 	bl	8001688 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b64      	cmp	r3, #100	; 0x64
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0fd      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b81      	ldr	r3, [pc, #516]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x312>
 8001ec0:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a7a      	ldr	r2, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	e02d      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x334>
 8001ed6:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a75      	ldr	r2, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6213      	str	r3, [r2, #32]
 8001ee2:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a72      	ldr	r2, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	e01c      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x356>
 8001ef8:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a6c      	ldr	r2, [pc, #432]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4a69      	ldr	r2, [pc, #420]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6213      	str	r3, [r2, #32]
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001f12:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a66      	ldr	r2, [pc, #408]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a63      	ldr	r2, [pc, #396]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fba9 	bl	8001688 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fba5 	bl	8001688 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0ab      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ee      	beq.n	8001f3a <HAL_RCC_OscConfig+0x37e>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fb93 	bl	8001688 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff fb8f 	bl	8001688 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e095      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8081 	beq.w	80020a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d061      	beq.n	8002074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d146      	bne.n	8002046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_OscConfig+0x4fc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fb63 	bl	8001688 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff fb5f 	bl	8001688 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e067      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d108      	bne.n	8002000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fee:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	492d      	ldr	r1, [pc, #180]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a19      	ldr	r1, [r3, #32]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	430b      	orrs	r3, r1
 8002012:	4927      	ldr	r1, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x4fc>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff fb33 	bl	8001688 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff fb2f 	bl	8001688 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e037      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x46a>
 8002044:	e02f      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_RCC_OscConfig+0x4fc>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fb1c 	bl	8001688 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff fb18 	bl	8001688 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e020      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x498>
 8002072:	e018      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e013      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	429a      	cmp	r2, r3
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40007000 	.word	0x40007000
 80020b8:	42420060 	.word	0x42420060

080020bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d0      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b6a      	ldr	r3, [pc, #424]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4965      	ldr	r1, [pc, #404]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b8      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800213a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b50      	ldr	r3, [pc, #320]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	494d      	ldr	r1, [pc, #308]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d040      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d115      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e07f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e073      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06b      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4936      	ldr	r1, [pc, #216]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7ff fa6c 	bl	8001688 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7ff fa68 	bl	8001688 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e053      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d210      	bcs.n	800220c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4922      	ldr	r1, [pc, #136]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e032      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4916      	ldr	r1, [pc, #88]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	490e      	ldr	r1, [pc, #56]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224a:	f000 f821 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800224e:	4601      	mov	r1, r0
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	5cd3      	ldrb	r3, [r2, r3]
 800225e:	fa21 f303 	lsr.w	r3, r1, r3
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1cc>)
 8002264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1d0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f9ca 	bl	8001604 <HAL_InitTick>

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40022000 	.word	0x40022000
 8002280:	40021000 	.word	0x40021000
 8002284:	080043ac 	.word	0x080043ac
 8002288:	20000000 	.word	0x20000000
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b490      	push	{r4, r7}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002296:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002298:	1d3c      	adds	r4, r7, #4
 800229a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ba:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x40>
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x46>
 80022ce:	e02d      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022d2:	623b      	str	r3, [r7, #32]
      break;
 80022d4:	e02d      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022e2:	4413      	add	r3, r2
 80022e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	0c5b      	lsrs	r3, r3, #17
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002302:	4413      	add	r3, r2
 8002304:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002308:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <HAL_RCC_GetSysClockFreq+0xbc>)
 800230e:	fb02 f203 	mul.w	r2, r2, r3
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	e004      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	623b      	str	r3, [r7, #32]
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCC_GetSysClockFreq+0xbc>)
 800232e:	623b      	str	r3, [r7, #32]
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	6a3b      	ldr	r3, [r7, #32]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bc90      	pop	{r4, r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	08004378 	.word	0x08004378
 8002344:	08004388 	.word	0x08004388
 8002348:	40021000 	.word	0x40021000
 800234c:	007a1200 	.word	0x007a1200
 8002350:	003d0900 	.word	0x003d0900

08002354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_RCC_GetHCLKFreq+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000000 	.word	0x20000000

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff2 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002370:	4601      	mov	r1, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	080043bc 	.word	0x080043bc

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002394:	f7ff ffde 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002398:	4601      	mov	r1, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4a03      	ldr	r2, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	080043bc 	.word	0x080043bc

080023b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <RCC_Delay+0x34>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <RCC_Delay+0x38>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d4:	bf00      	nop
  }
  while (Delay --);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e5a      	subs	r2, r3, #1
 80023da:	60fa      	str	r2, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <RCC_Delay+0x1c>
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000000 	.word	0x20000000
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e076      	b.n	80024f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	2b00      	cmp	r3, #0
 800240c:	d108      	bne.n	8002420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002416:	d009      	beq.n	800242c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
 800241e:	e005      	b.n	800242c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe ff56 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	0c1a      	lsrs	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f002 0204 	and.w	r2, r2, #4
 80024d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_SPI_Transmit+0x22>
 800251a:	2302      	movs	r3, #2
 800251c:	e126      	b.n	800276c <HAL_SPI_Transmit+0x270>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002526:	f7ff f8af 	bl	8001688 <HAL_GetTick>
 800252a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d002      	beq.n	8002542 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800253c:	2302      	movs	r3, #2
 800253e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002540:	e10b      	b.n	800275a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_SPI_Transmit+0x52>
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002552:	e102      	b.n	800275a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2203      	movs	r2, #3
 8002558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	88fa      	ldrh	r2, [r7, #6]
 8002572:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800259a:	d10f      	bne.n	80025bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d007      	beq.n	80025da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e2:	d14b      	bne.n	800267c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_SPI_Transmit+0xf6>
 80025ec:	8afb      	ldrh	r3, [r7, #22]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d13e      	bne.n	8002670 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	881a      	ldrh	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	1c9a      	adds	r2, r3, #2
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002616:	e02b      	b.n	8002670 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d112      	bne.n	800264c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	881a      	ldrh	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	1c9a      	adds	r2, r3, #2
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	86da      	strh	r2, [r3, #54]	; 0x36
 800264a:	e011      	b.n	8002670 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800264c:	f7ff f81c 	bl	8001688 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d803      	bhi.n	8002664 <HAL_SPI_Transmit+0x168>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002662:	d102      	bne.n	800266a <HAL_SPI_Transmit+0x16e>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800266e:	e074      	b.n	800275a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ce      	bne.n	8002618 <HAL_SPI_Transmit+0x11c>
 800267a:	e04c      	b.n	8002716 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_Transmit+0x18e>
 8002684:	8afb      	ldrh	r3, [r7, #22]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d140      	bne.n	800270c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	7812      	ldrb	r2, [r2, #0]
 8002696:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026b0:	e02c      	b.n	800270c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d113      	bne.n	80026e8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	330c      	adds	r3, #12
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80026e6:	e011      	b.n	800270c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e8:	f7fe ffce 	bl	8001688 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d803      	bhi.n	8002700 <HAL_SPI_Transmit+0x204>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fe:	d102      	bne.n	8002706 <HAL_SPI_Transmit+0x20a>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	77fb      	strb	r3, [r7, #31]
          goto error;
 800270a:	e026      	b.n	800275a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1cd      	bne.n	80026b2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fa62 	bl	8002be4 <SPI_EndRxTxTransaction>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	77fb      	strb	r3, [r7, #31]
 8002756:	e000      	b.n	800275a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002758:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800276a:	7ffb      	ldrb	r3, [r7, #31]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	; 0x30
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002782:	2301      	movs	r3, #1
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_SPI_TransmitReceive+0x26>
 8002796:	2302      	movs	r3, #2
 8002798:	e18a      	b.n	8002ab0 <HAL_SPI_TransmitReceive+0x33c>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a2:	f7fe ff71 	bl	8001688 <HAL_GetTick>
 80027a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d00f      	beq.n	80027e4 <HAL_SPI_TransmitReceive+0x70>
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ca:	d107      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x68>
 80027d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d003      	beq.n	80027e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
 80027de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027e2:	e15b      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_SPI_TransmitReceive+0x82>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_TransmitReceive+0x82>
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027fc:	e14e      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b04      	cmp	r3, #4
 8002808:	d003      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2205      	movs	r2, #5
 800280e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	887a      	ldrh	r2, [r7, #2]
 8002822:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	887a      	ldrh	r2, [r7, #2]
 800283a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d007      	beq.n	8002866 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800286e:	d178      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_SPI_TransmitReceive+0x10a>
 8002878:	8b7b      	ldrh	r3, [r7, #26]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d166      	bne.n	800294c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	881a      	ldrh	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	1c9a      	adds	r2, r3, #2
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a2:	e053      	b.n	800294c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d11b      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x176>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d016      	beq.n	80028ea <HAL_SPI_TransmitReceive+0x176>
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d113      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	881a      	ldrh	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	1c9a      	adds	r2, r3, #2
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d119      	bne.n	800292c <HAL_SPI_TransmitReceive+0x1b8>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d014      	beq.n	800292c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	b292      	uxth	r2, r2
 800290e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	1c9a      	adds	r2, r3, #2
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002928:	2301      	movs	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800292c:	f7fe feac 	bl	8001688 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002938:	429a      	cmp	r2, r3
 800293a:	d807      	bhi.n	800294c <HAL_SPI_TransmitReceive+0x1d8>
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d003      	beq.n	800294c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800294a:	e0a7      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1a6      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x130>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1a1      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x130>
 8002960:	e07c      	b.n	8002a5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_SPI_TransmitReceive+0x1fc>
 800296a:	8b7b      	ldrh	r3, [r7, #26]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d16b      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	7812      	ldrb	r2, [r2, #0]
 800297c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002996:	e057      	b.n	8002a48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d11c      	bne.n	80029e0 <HAL_SPI_TransmitReceive+0x26c>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d017      	beq.n	80029e0 <HAL_SPI_TransmitReceive+0x26c>
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d114      	bne.n	80029e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	7812      	ldrb	r2, [r2, #0]
 80029c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d119      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x2ae>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d014      	beq.n	8002a22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a22:	f7fe fe31 	bl	8001688 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d803      	bhi.n	8002a3a <HAL_SPI_TransmitReceive+0x2c6>
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d102      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x2cc>
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a46:	e029      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1a2      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x224>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d19d      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f8bf 	bl	8002be4 <SPI_EndRxTxTransaction>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a78:	e010      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10b      	bne.n	8002a9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	e000      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3730      	adds	r7, #48	; 0x30
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac6:	b2db      	uxtb	r3, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
	...

08002ad4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ae4:	f7fe fdd0 	bl	8001688 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002af4:	f7fe fdc8 	bl	8001688 <HAL_GetTick>
 8002af8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002afa:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	015b      	lsls	r3, r3, #5
 8002b00:	0d1b      	lsrs	r3, r3, #20
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b0a:	e054      	b.n	8002bb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d050      	beq.n	8002bb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b14:	f7fe fdb8 	bl	8001688 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d902      	bls.n	8002b2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d13d      	bne.n	8002ba6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b42:	d111      	bne.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b4c:	d004      	beq.n	8002b58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b56:	d107      	bne.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b70:	d10f      	bne.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e017      	b.n	8002bd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d19b      	bne.n	8002b0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000000 	.word	0x20000000

08002be4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff ff6a 	bl	8002ad4 <SPI_WaitFlagStateUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e000      	b.n	8002c18 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e03f      	b.n	8002cb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fba2 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f905 	bl	8002e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b08a      	sub	sp, #40	; 0x28
 8002cbe:	af02      	add	r7, sp, #8
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d17c      	bne.n	8002dd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_UART_Transmit+0x2c>
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e075      	b.n	8002dd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_UART_Transmit+0x3e>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e06e      	b.n	8002dd6 <HAL_UART_Transmit+0x11c>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2221      	movs	r2, #33	; 0x21
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0e:	f7fe fcbb 	bl	8001688 <HAL_GetTick>
 8002d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d28:	d108      	bne.n	8002d3c <HAL_UART_Transmit+0x82>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d104      	bne.n	8002d3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	e003      	b.n	8002d44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d4c:	e02a      	b.n	8002da4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f840 	bl	8002dde <UART_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e036      	b.n	8002dd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10b      	bne.n	8002d86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	3302      	adds	r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e007      	b.n	8002d96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	3301      	adds	r3, #1
 8002d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1cf      	bne.n	8002d4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2140      	movs	r1, #64	; 0x40
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f810 	bl	8002dde <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e006      	b.n	8002dd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	4613      	mov	r3, r2
 8002dec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dee:	e02c      	b.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d028      	beq.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x30>
 8002dfe:	f7fe fc43 	bl	8001688 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d21d      	bcs.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e00f      	b.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4013      	ands	r3, r2
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d0c3      	beq.n	8002df0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eae:	f023 030c 	bic.w	r3, r3, #12
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2c      	ldr	r2, [pc, #176]	; (8002f88 <UART_SetConfig+0x114>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d103      	bne.n	8002ee4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002edc:	f7ff fa58 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	e002      	b.n	8002eea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ee4:	f7ff fa40 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8002ee8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009a      	lsls	r2, r3, #2
 8002ef4:	441a      	add	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <UART_SetConfig+0x118>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	0119      	lsls	r1, r3, #4
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	009a      	lsls	r2, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <UART_SetConfig+0x118>)
 8002f22:	fba3 0302 	umull	r0, r3, r3, r2
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2064      	movs	r0, #100	; 0x64
 8002f2a:	fb00 f303 	mul.w	r3, r0, r3
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	3332      	adds	r3, #50	; 0x32
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <UART_SetConfig+0x118>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f40:	4419      	add	r1, r3
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009a      	lsls	r2, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <UART_SetConfig+0x118>)
 8002f5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2064      	movs	r0, #100	; 0x64
 8002f62:	fb00 f303 	mul.w	r3, r0, r3
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	3332      	adds	r3, #50	; 0x32
 8002f6c:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <UART_SetConfig+0x118>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	440a      	add	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	51eb851f 	.word	0x51eb851f

08002f90 <__errno>:
 8002f90:	4b01      	ldr	r3, [pc, #4]	; (8002f98 <__errno+0x8>)
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	2000000c 	.word	0x2000000c

08002f9c <__libc_init_array>:
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	2500      	movs	r5, #0
 8002fa0:	4e0c      	ldr	r6, [pc, #48]	; (8002fd4 <__libc_init_array+0x38>)
 8002fa2:	4c0d      	ldr	r4, [pc, #52]	; (8002fd8 <__libc_init_array+0x3c>)
 8002fa4:	1ba4      	subs	r4, r4, r6
 8002fa6:	10a4      	asrs	r4, r4, #2
 8002fa8:	42a5      	cmp	r5, r4
 8002faa:	d109      	bne.n	8002fc0 <__libc_init_array+0x24>
 8002fac:	f001 f93a 	bl	8004224 <_init>
 8002fb0:	2500      	movs	r5, #0
 8002fb2:	4e0a      	ldr	r6, [pc, #40]	; (8002fdc <__libc_init_array+0x40>)
 8002fb4:	4c0a      	ldr	r4, [pc, #40]	; (8002fe0 <__libc_init_array+0x44>)
 8002fb6:	1ba4      	subs	r4, r4, r6
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	42a5      	cmp	r5, r4
 8002fbc:	d105      	bne.n	8002fca <__libc_init_array+0x2e>
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fc4:	4798      	blx	r3
 8002fc6:	3501      	adds	r5, #1
 8002fc8:	e7ee      	b.n	8002fa8 <__libc_init_array+0xc>
 8002fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fce:	4798      	blx	r3
 8002fd0:	3501      	adds	r5, #1
 8002fd2:	e7f2      	b.n	8002fba <__libc_init_array+0x1e>
 8002fd4:	08004464 	.word	0x08004464
 8002fd8:	08004464 	.word	0x08004464
 8002fdc:	08004464 	.word	0x08004464
 8002fe0:	08004468 	.word	0x08004468

08002fe4 <memcpy>:
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	1e43      	subs	r3, r0, #1
 8002fe8:	440a      	add	r2, r1
 8002fea:	4291      	cmp	r1, r2
 8002fec:	d100      	bne.n	8002ff0 <memcpy+0xc>
 8002fee:	bd10      	pop	{r4, pc}
 8002ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ff8:	e7f7      	b.n	8002fea <memcpy+0x6>

08002ffa <memset>:
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4402      	add	r2, r0
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d100      	bne.n	8003004 <memset+0xa>
 8003002:	4770      	bx	lr
 8003004:	f803 1b01 	strb.w	r1, [r3], #1
 8003008:	e7f9      	b.n	8002ffe <memset+0x4>
	...

0800300c <iprintf>:
 800300c:	b40f      	push	{r0, r1, r2, r3}
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <iprintf+0x2c>)
 8003010:	b513      	push	{r0, r1, r4, lr}
 8003012:	681c      	ldr	r4, [r3, #0]
 8003014:	b124      	cbz	r4, 8003020 <iprintf+0x14>
 8003016:	69a3      	ldr	r3, [r4, #24]
 8003018:	b913      	cbnz	r3, 8003020 <iprintf+0x14>
 800301a:	4620      	mov	r0, r4
 800301c:	f000 fa42 	bl	80034a4 <__sinit>
 8003020:	ab05      	add	r3, sp, #20
 8003022:	9a04      	ldr	r2, [sp, #16]
 8003024:	68a1      	ldr	r1, [r4, #8]
 8003026:	4620      	mov	r0, r4
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	f000 fd49 	bl	8003ac0 <_vfiprintf_r>
 800302e:	b002      	add	sp, #8
 8003030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003034:	b004      	add	sp, #16
 8003036:	4770      	bx	lr
 8003038:	2000000c 	.word	0x2000000c

0800303c <_puts_r>:
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	460e      	mov	r6, r1
 8003040:	4605      	mov	r5, r0
 8003042:	b118      	cbz	r0, 800304c <_puts_r+0x10>
 8003044:	6983      	ldr	r3, [r0, #24]
 8003046:	b90b      	cbnz	r3, 800304c <_puts_r+0x10>
 8003048:	f000 fa2c 	bl	80034a4 <__sinit>
 800304c:	69ab      	ldr	r3, [r5, #24]
 800304e:	68ac      	ldr	r4, [r5, #8]
 8003050:	b913      	cbnz	r3, 8003058 <_puts_r+0x1c>
 8003052:	4628      	mov	r0, r5
 8003054:	f000 fa26 	bl	80034a4 <__sinit>
 8003058:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <_puts_r+0xac>)
 800305a:	429c      	cmp	r4, r3
 800305c:	d117      	bne.n	800308e <_puts_r+0x52>
 800305e:	686c      	ldr	r4, [r5, #4]
 8003060:	89a3      	ldrh	r3, [r4, #12]
 8003062:	071b      	lsls	r3, r3, #28
 8003064:	d51d      	bpl.n	80030a2 <_puts_r+0x66>
 8003066:	6923      	ldr	r3, [r4, #16]
 8003068:	b1db      	cbz	r3, 80030a2 <_puts_r+0x66>
 800306a:	3e01      	subs	r6, #1
 800306c:	68a3      	ldr	r3, [r4, #8]
 800306e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003072:	3b01      	subs	r3, #1
 8003074:	60a3      	str	r3, [r4, #8]
 8003076:	b9e9      	cbnz	r1, 80030b4 <_puts_r+0x78>
 8003078:	2b00      	cmp	r3, #0
 800307a:	da2e      	bge.n	80030da <_puts_r+0x9e>
 800307c:	4622      	mov	r2, r4
 800307e:	210a      	movs	r1, #10
 8003080:	4628      	mov	r0, r5
 8003082:	f000 f85f 	bl	8003144 <__swbuf_r>
 8003086:	3001      	adds	r0, #1
 8003088:	d011      	beq.n	80030ae <_puts_r+0x72>
 800308a:	200a      	movs	r0, #10
 800308c:	e011      	b.n	80030b2 <_puts_r+0x76>
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <_puts_r+0xb0>)
 8003090:	429c      	cmp	r4, r3
 8003092:	d101      	bne.n	8003098 <_puts_r+0x5c>
 8003094:	68ac      	ldr	r4, [r5, #8]
 8003096:	e7e3      	b.n	8003060 <_puts_r+0x24>
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <_puts_r+0xb4>)
 800309a:	429c      	cmp	r4, r3
 800309c:	bf08      	it	eq
 800309e:	68ec      	ldreq	r4, [r5, #12]
 80030a0:	e7de      	b.n	8003060 <_puts_r+0x24>
 80030a2:	4621      	mov	r1, r4
 80030a4:	4628      	mov	r0, r5
 80030a6:	f000 f89f 	bl	80031e8 <__swsetup_r>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d0dd      	beq.n	800306a <_puts_r+0x2e>
 80030ae:	f04f 30ff 	mov.w	r0, #4294967295
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da04      	bge.n	80030c2 <_puts_r+0x86>
 80030b8:	69a2      	ldr	r2, [r4, #24]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	dc06      	bgt.n	80030cc <_puts_r+0x90>
 80030be:	290a      	cmp	r1, #10
 80030c0:	d004      	beq.n	80030cc <_puts_r+0x90>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	6022      	str	r2, [r4, #0]
 80030c8:	7019      	strb	r1, [r3, #0]
 80030ca:	e7cf      	b.n	800306c <_puts_r+0x30>
 80030cc:	4622      	mov	r2, r4
 80030ce:	4628      	mov	r0, r5
 80030d0:	f000 f838 	bl	8003144 <__swbuf_r>
 80030d4:	3001      	adds	r0, #1
 80030d6:	d1c9      	bne.n	800306c <_puts_r+0x30>
 80030d8:	e7e9      	b.n	80030ae <_puts_r+0x72>
 80030da:	200a      	movs	r0, #10
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	6022      	str	r2, [r4, #0]
 80030e2:	7018      	strb	r0, [r3, #0]
 80030e4:	e7e5      	b.n	80030b2 <_puts_r+0x76>
 80030e6:	bf00      	nop
 80030e8:	080043e8 	.word	0x080043e8
 80030ec:	08004408 	.word	0x08004408
 80030f0:	080043c8 	.word	0x080043c8

080030f4 <puts>:
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <puts+0xc>)
 80030f6:	4601      	mov	r1, r0
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	f7ff bf9f 	b.w	800303c <_puts_r>
 80030fe:	bf00      	nop
 8003100:	2000000c 	.word	0x2000000c

08003104 <siprintf>:
 8003104:	b40e      	push	{r1, r2, r3}
 8003106:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800310a:	b500      	push	{lr}
 800310c:	b09c      	sub	sp, #112	; 0x70
 800310e:	ab1d      	add	r3, sp, #116	; 0x74
 8003110:	9002      	str	r0, [sp, #8]
 8003112:	9006      	str	r0, [sp, #24]
 8003114:	9107      	str	r1, [sp, #28]
 8003116:	9104      	str	r1, [sp, #16]
 8003118:	4808      	ldr	r0, [pc, #32]	; (800313c <siprintf+0x38>)
 800311a:	4909      	ldr	r1, [pc, #36]	; (8003140 <siprintf+0x3c>)
 800311c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003120:	9105      	str	r1, [sp, #20]
 8003122:	6800      	ldr	r0, [r0, #0]
 8003124:	a902      	add	r1, sp, #8
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	f000 fbaa 	bl	8003880 <_svfiprintf_r>
 800312c:	2200      	movs	r2, #0
 800312e:	9b02      	ldr	r3, [sp, #8]
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	b01c      	add	sp, #112	; 0x70
 8003134:	f85d eb04 	ldr.w	lr, [sp], #4
 8003138:	b003      	add	sp, #12
 800313a:	4770      	bx	lr
 800313c:	2000000c 	.word	0x2000000c
 8003140:	ffff0208 	.word	0xffff0208

08003144 <__swbuf_r>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	460e      	mov	r6, r1
 8003148:	4614      	mov	r4, r2
 800314a:	4605      	mov	r5, r0
 800314c:	b118      	cbz	r0, 8003156 <__swbuf_r+0x12>
 800314e:	6983      	ldr	r3, [r0, #24]
 8003150:	b90b      	cbnz	r3, 8003156 <__swbuf_r+0x12>
 8003152:	f000 f9a7 	bl	80034a4 <__sinit>
 8003156:	4b21      	ldr	r3, [pc, #132]	; (80031dc <__swbuf_r+0x98>)
 8003158:	429c      	cmp	r4, r3
 800315a:	d12a      	bne.n	80031b2 <__swbuf_r+0x6e>
 800315c:	686c      	ldr	r4, [r5, #4]
 800315e:	69a3      	ldr	r3, [r4, #24]
 8003160:	60a3      	str	r3, [r4, #8]
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	071a      	lsls	r2, r3, #28
 8003166:	d52e      	bpl.n	80031c6 <__swbuf_r+0x82>
 8003168:	6923      	ldr	r3, [r4, #16]
 800316a:	b363      	cbz	r3, 80031c6 <__swbuf_r+0x82>
 800316c:	6923      	ldr	r3, [r4, #16]
 800316e:	6820      	ldr	r0, [r4, #0]
 8003170:	b2f6      	uxtb	r6, r6
 8003172:	1ac0      	subs	r0, r0, r3
 8003174:	6963      	ldr	r3, [r4, #20]
 8003176:	4637      	mov	r7, r6
 8003178:	4283      	cmp	r3, r0
 800317a:	dc04      	bgt.n	8003186 <__swbuf_r+0x42>
 800317c:	4621      	mov	r1, r4
 800317e:	4628      	mov	r0, r5
 8003180:	f000 f926 	bl	80033d0 <_fflush_r>
 8003184:	bb28      	cbnz	r0, 80031d2 <__swbuf_r+0x8e>
 8003186:	68a3      	ldr	r3, [r4, #8]
 8003188:	3001      	adds	r0, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	60a3      	str	r3, [r4, #8]
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	6022      	str	r2, [r4, #0]
 8003194:	701e      	strb	r6, [r3, #0]
 8003196:	6963      	ldr	r3, [r4, #20]
 8003198:	4283      	cmp	r3, r0
 800319a:	d004      	beq.n	80031a6 <__swbuf_r+0x62>
 800319c:	89a3      	ldrh	r3, [r4, #12]
 800319e:	07db      	lsls	r3, r3, #31
 80031a0:	d519      	bpl.n	80031d6 <__swbuf_r+0x92>
 80031a2:	2e0a      	cmp	r6, #10
 80031a4:	d117      	bne.n	80031d6 <__swbuf_r+0x92>
 80031a6:	4621      	mov	r1, r4
 80031a8:	4628      	mov	r0, r5
 80031aa:	f000 f911 	bl	80033d0 <_fflush_r>
 80031ae:	b190      	cbz	r0, 80031d6 <__swbuf_r+0x92>
 80031b0:	e00f      	b.n	80031d2 <__swbuf_r+0x8e>
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <__swbuf_r+0x9c>)
 80031b4:	429c      	cmp	r4, r3
 80031b6:	d101      	bne.n	80031bc <__swbuf_r+0x78>
 80031b8:	68ac      	ldr	r4, [r5, #8]
 80031ba:	e7d0      	b.n	800315e <__swbuf_r+0x1a>
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <__swbuf_r+0xa0>)
 80031be:	429c      	cmp	r4, r3
 80031c0:	bf08      	it	eq
 80031c2:	68ec      	ldreq	r4, [r5, #12]
 80031c4:	e7cb      	b.n	800315e <__swbuf_r+0x1a>
 80031c6:	4621      	mov	r1, r4
 80031c8:	4628      	mov	r0, r5
 80031ca:	f000 f80d 	bl	80031e8 <__swsetup_r>
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d0cc      	beq.n	800316c <__swbuf_r+0x28>
 80031d2:	f04f 37ff 	mov.w	r7, #4294967295
 80031d6:	4638      	mov	r0, r7
 80031d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031da:	bf00      	nop
 80031dc:	080043e8 	.word	0x080043e8
 80031e0:	08004408 	.word	0x08004408
 80031e4:	080043c8 	.word	0x080043c8

080031e8 <__swsetup_r>:
 80031e8:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <__swsetup_r+0xcc>)
 80031ea:	b570      	push	{r4, r5, r6, lr}
 80031ec:	681d      	ldr	r5, [r3, #0]
 80031ee:	4606      	mov	r6, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	b125      	cbz	r5, 80031fe <__swsetup_r+0x16>
 80031f4:	69ab      	ldr	r3, [r5, #24]
 80031f6:	b913      	cbnz	r3, 80031fe <__swsetup_r+0x16>
 80031f8:	4628      	mov	r0, r5
 80031fa:	f000 f953 	bl	80034a4 <__sinit>
 80031fe:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <__swsetup_r+0xd0>)
 8003200:	429c      	cmp	r4, r3
 8003202:	d10f      	bne.n	8003224 <__swsetup_r+0x3c>
 8003204:	686c      	ldr	r4, [r5, #4]
 8003206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800320a:	b29a      	uxth	r2, r3
 800320c:	0715      	lsls	r5, r2, #28
 800320e:	d42c      	bmi.n	800326a <__swsetup_r+0x82>
 8003210:	06d0      	lsls	r0, r2, #27
 8003212:	d411      	bmi.n	8003238 <__swsetup_r+0x50>
 8003214:	2209      	movs	r2, #9
 8003216:	6032      	str	r2, [r6, #0]
 8003218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800321c:	81a3      	strh	r3, [r4, #12]
 800321e:	f04f 30ff 	mov.w	r0, #4294967295
 8003222:	e03e      	b.n	80032a2 <__swsetup_r+0xba>
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <__swsetup_r+0xd4>)
 8003226:	429c      	cmp	r4, r3
 8003228:	d101      	bne.n	800322e <__swsetup_r+0x46>
 800322a:	68ac      	ldr	r4, [r5, #8]
 800322c:	e7eb      	b.n	8003206 <__swsetup_r+0x1e>
 800322e:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <__swsetup_r+0xd8>)
 8003230:	429c      	cmp	r4, r3
 8003232:	bf08      	it	eq
 8003234:	68ec      	ldreq	r4, [r5, #12]
 8003236:	e7e6      	b.n	8003206 <__swsetup_r+0x1e>
 8003238:	0751      	lsls	r1, r2, #29
 800323a:	d512      	bpl.n	8003262 <__swsetup_r+0x7a>
 800323c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800323e:	b141      	cbz	r1, 8003252 <__swsetup_r+0x6a>
 8003240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003244:	4299      	cmp	r1, r3
 8003246:	d002      	beq.n	800324e <__swsetup_r+0x66>
 8003248:	4630      	mov	r0, r6
 800324a:	f000 fa19 	bl	8003680 <_free_r>
 800324e:	2300      	movs	r3, #0
 8003250:	6363      	str	r3, [r4, #52]	; 0x34
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	2300      	movs	r3, #0
 800325c:	6063      	str	r3, [r4, #4]
 800325e:	6923      	ldr	r3, [r4, #16]
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	6923      	ldr	r3, [r4, #16]
 800326c:	b94b      	cbnz	r3, 8003282 <__swsetup_r+0x9a>
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003278:	d003      	beq.n	8003282 <__swsetup_r+0x9a>
 800327a:	4621      	mov	r1, r4
 800327c:	4630      	mov	r0, r6
 800327e:	f000 f9bf 	bl	8003600 <__smakebuf_r>
 8003282:	89a2      	ldrh	r2, [r4, #12]
 8003284:	f012 0301 	ands.w	r3, r2, #1
 8003288:	d00c      	beq.n	80032a4 <__swsetup_r+0xbc>
 800328a:	2300      	movs	r3, #0
 800328c:	60a3      	str	r3, [r4, #8]
 800328e:	6963      	ldr	r3, [r4, #20]
 8003290:	425b      	negs	r3, r3
 8003292:	61a3      	str	r3, [r4, #24]
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	b953      	cbnz	r3, 80032ae <__swsetup_r+0xc6>
 8003298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800329c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80032a0:	d1ba      	bne.n	8003218 <__swsetup_r+0x30>
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	0792      	lsls	r2, r2, #30
 80032a6:	bf58      	it	pl
 80032a8:	6963      	ldrpl	r3, [r4, #20]
 80032aa:	60a3      	str	r3, [r4, #8]
 80032ac:	e7f2      	b.n	8003294 <__swsetup_r+0xac>
 80032ae:	2000      	movs	r0, #0
 80032b0:	e7f7      	b.n	80032a2 <__swsetup_r+0xba>
 80032b2:	bf00      	nop
 80032b4:	2000000c 	.word	0x2000000c
 80032b8:	080043e8 	.word	0x080043e8
 80032bc:	08004408 	.word	0x08004408
 80032c0:	080043c8 	.word	0x080043c8

080032c4 <__sflush_r>:
 80032c4:	898a      	ldrh	r2, [r1, #12]
 80032c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ca:	4605      	mov	r5, r0
 80032cc:	0710      	lsls	r0, r2, #28
 80032ce:	460c      	mov	r4, r1
 80032d0:	d458      	bmi.n	8003384 <__sflush_r+0xc0>
 80032d2:	684b      	ldr	r3, [r1, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	dc05      	bgt.n	80032e4 <__sflush_r+0x20>
 80032d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	dc02      	bgt.n	80032e4 <__sflush_r+0x20>
 80032de:	2000      	movs	r0, #0
 80032e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032e6:	2e00      	cmp	r6, #0
 80032e8:	d0f9      	beq.n	80032de <__sflush_r+0x1a>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032f0:	682f      	ldr	r7, [r5, #0]
 80032f2:	6a21      	ldr	r1, [r4, #32]
 80032f4:	602b      	str	r3, [r5, #0]
 80032f6:	d032      	beq.n	800335e <__sflush_r+0x9a>
 80032f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	075a      	lsls	r2, r3, #29
 80032fe:	d505      	bpl.n	800330c <__sflush_r+0x48>
 8003300:	6863      	ldr	r3, [r4, #4]
 8003302:	1ac0      	subs	r0, r0, r3
 8003304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003306:	b10b      	cbz	r3, 800330c <__sflush_r+0x48>
 8003308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800330a:	1ac0      	subs	r0, r0, r3
 800330c:	2300      	movs	r3, #0
 800330e:	4602      	mov	r2, r0
 8003310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003312:	6a21      	ldr	r1, [r4, #32]
 8003314:	4628      	mov	r0, r5
 8003316:	47b0      	blx	r6
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	89a3      	ldrh	r3, [r4, #12]
 800331c:	d106      	bne.n	800332c <__sflush_r+0x68>
 800331e:	6829      	ldr	r1, [r5, #0]
 8003320:	291d      	cmp	r1, #29
 8003322:	d848      	bhi.n	80033b6 <__sflush_r+0xf2>
 8003324:	4a29      	ldr	r2, [pc, #164]	; (80033cc <__sflush_r+0x108>)
 8003326:	40ca      	lsrs	r2, r1
 8003328:	07d6      	lsls	r6, r2, #31
 800332a:	d544      	bpl.n	80033b6 <__sflush_r+0xf2>
 800332c:	2200      	movs	r2, #0
 800332e:	6062      	str	r2, [r4, #4]
 8003330:	6922      	ldr	r2, [r4, #16]
 8003332:	04d9      	lsls	r1, r3, #19
 8003334:	6022      	str	r2, [r4, #0]
 8003336:	d504      	bpl.n	8003342 <__sflush_r+0x7e>
 8003338:	1c42      	adds	r2, r0, #1
 800333a:	d101      	bne.n	8003340 <__sflush_r+0x7c>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	b903      	cbnz	r3, 8003342 <__sflush_r+0x7e>
 8003340:	6560      	str	r0, [r4, #84]	; 0x54
 8003342:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003344:	602f      	str	r7, [r5, #0]
 8003346:	2900      	cmp	r1, #0
 8003348:	d0c9      	beq.n	80032de <__sflush_r+0x1a>
 800334a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800334e:	4299      	cmp	r1, r3
 8003350:	d002      	beq.n	8003358 <__sflush_r+0x94>
 8003352:	4628      	mov	r0, r5
 8003354:	f000 f994 	bl	8003680 <_free_r>
 8003358:	2000      	movs	r0, #0
 800335a:	6360      	str	r0, [r4, #52]	; 0x34
 800335c:	e7c0      	b.n	80032e0 <__sflush_r+0x1c>
 800335e:	2301      	movs	r3, #1
 8003360:	4628      	mov	r0, r5
 8003362:	47b0      	blx	r6
 8003364:	1c41      	adds	r1, r0, #1
 8003366:	d1c8      	bne.n	80032fa <__sflush_r+0x36>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0c5      	beq.n	80032fa <__sflush_r+0x36>
 800336e:	2b1d      	cmp	r3, #29
 8003370:	d001      	beq.n	8003376 <__sflush_r+0xb2>
 8003372:	2b16      	cmp	r3, #22
 8003374:	d101      	bne.n	800337a <__sflush_r+0xb6>
 8003376:	602f      	str	r7, [r5, #0]
 8003378:	e7b1      	b.n	80032de <__sflush_r+0x1a>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003380:	81a3      	strh	r3, [r4, #12]
 8003382:	e7ad      	b.n	80032e0 <__sflush_r+0x1c>
 8003384:	690f      	ldr	r7, [r1, #16]
 8003386:	2f00      	cmp	r7, #0
 8003388:	d0a9      	beq.n	80032de <__sflush_r+0x1a>
 800338a:	0793      	lsls	r3, r2, #30
 800338c:	bf18      	it	ne
 800338e:	2300      	movne	r3, #0
 8003390:	680e      	ldr	r6, [r1, #0]
 8003392:	bf08      	it	eq
 8003394:	694b      	ldreq	r3, [r1, #20]
 8003396:	eba6 0807 	sub.w	r8, r6, r7
 800339a:	600f      	str	r7, [r1, #0]
 800339c:	608b      	str	r3, [r1, #8]
 800339e:	f1b8 0f00 	cmp.w	r8, #0
 80033a2:	dd9c      	ble.n	80032de <__sflush_r+0x1a>
 80033a4:	4643      	mov	r3, r8
 80033a6:	463a      	mov	r2, r7
 80033a8:	6a21      	ldr	r1, [r4, #32]
 80033aa:	4628      	mov	r0, r5
 80033ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033ae:	47b0      	blx	r6
 80033b0:	2800      	cmp	r0, #0
 80033b2:	dc06      	bgt.n	80033c2 <__sflush_r+0xfe>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ba:	81a3      	strh	r3, [r4, #12]
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	e78e      	b.n	80032e0 <__sflush_r+0x1c>
 80033c2:	4407      	add	r7, r0
 80033c4:	eba8 0800 	sub.w	r8, r8, r0
 80033c8:	e7e9      	b.n	800339e <__sflush_r+0xda>
 80033ca:	bf00      	nop
 80033cc:	20400001 	.word	0x20400001

080033d0 <_fflush_r>:
 80033d0:	b538      	push	{r3, r4, r5, lr}
 80033d2:	690b      	ldr	r3, [r1, #16]
 80033d4:	4605      	mov	r5, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	b1db      	cbz	r3, 8003412 <_fflush_r+0x42>
 80033da:	b118      	cbz	r0, 80033e4 <_fflush_r+0x14>
 80033dc:	6983      	ldr	r3, [r0, #24]
 80033de:	b90b      	cbnz	r3, 80033e4 <_fflush_r+0x14>
 80033e0:	f000 f860 	bl	80034a4 <__sinit>
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <_fflush_r+0x48>)
 80033e6:	429c      	cmp	r4, r3
 80033e8:	d109      	bne.n	80033fe <_fflush_r+0x2e>
 80033ea:	686c      	ldr	r4, [r5, #4]
 80033ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033f0:	b17b      	cbz	r3, 8003412 <_fflush_r+0x42>
 80033f2:	4621      	mov	r1, r4
 80033f4:	4628      	mov	r0, r5
 80033f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033fa:	f7ff bf63 	b.w	80032c4 <__sflush_r>
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <_fflush_r+0x4c>)
 8003400:	429c      	cmp	r4, r3
 8003402:	d101      	bne.n	8003408 <_fflush_r+0x38>
 8003404:	68ac      	ldr	r4, [r5, #8]
 8003406:	e7f1      	b.n	80033ec <_fflush_r+0x1c>
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <_fflush_r+0x50>)
 800340a:	429c      	cmp	r4, r3
 800340c:	bf08      	it	eq
 800340e:	68ec      	ldreq	r4, [r5, #12]
 8003410:	e7ec      	b.n	80033ec <_fflush_r+0x1c>
 8003412:	2000      	movs	r0, #0
 8003414:	bd38      	pop	{r3, r4, r5, pc}
 8003416:	bf00      	nop
 8003418:	080043e8 	.word	0x080043e8
 800341c:	08004408 	.word	0x08004408
 8003420:	080043c8 	.word	0x080043c8

08003424 <std>:
 8003424:	2300      	movs	r3, #0
 8003426:	b510      	push	{r4, lr}
 8003428:	4604      	mov	r4, r0
 800342a:	e9c0 3300 	strd	r3, r3, [r0]
 800342e:	6083      	str	r3, [r0, #8]
 8003430:	8181      	strh	r1, [r0, #12]
 8003432:	6643      	str	r3, [r0, #100]	; 0x64
 8003434:	81c2      	strh	r2, [r0, #14]
 8003436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800343a:	6183      	str	r3, [r0, #24]
 800343c:	4619      	mov	r1, r3
 800343e:	2208      	movs	r2, #8
 8003440:	305c      	adds	r0, #92	; 0x5c
 8003442:	f7ff fdda 	bl	8002ffa <memset>
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <std+0x38>)
 8003448:	6224      	str	r4, [r4, #32]
 800344a:	6263      	str	r3, [r4, #36]	; 0x24
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <std+0x3c>)
 800344e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <std+0x40>)
 8003452:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <std+0x44>)
 8003456:	6323      	str	r3, [r4, #48]	; 0x30
 8003458:	bd10      	pop	{r4, pc}
 800345a:	bf00      	nop
 800345c:	0800401d 	.word	0x0800401d
 8003460:	0800403f 	.word	0x0800403f
 8003464:	08004077 	.word	0x08004077
 8003468:	0800409b 	.word	0x0800409b

0800346c <_cleanup_r>:
 800346c:	4901      	ldr	r1, [pc, #4]	; (8003474 <_cleanup_r+0x8>)
 800346e:	f000 b885 	b.w	800357c <_fwalk_reent>
 8003472:	bf00      	nop
 8003474:	080033d1 	.word	0x080033d1

08003478 <__sfmoreglue>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	2568      	movs	r5, #104	; 0x68
 800347c:	1e4a      	subs	r2, r1, #1
 800347e:	4355      	muls	r5, r2
 8003480:	460e      	mov	r6, r1
 8003482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003486:	f000 f947 	bl	8003718 <_malloc_r>
 800348a:	4604      	mov	r4, r0
 800348c:	b140      	cbz	r0, 80034a0 <__sfmoreglue+0x28>
 800348e:	2100      	movs	r1, #0
 8003490:	e9c0 1600 	strd	r1, r6, [r0]
 8003494:	300c      	adds	r0, #12
 8003496:	60a0      	str	r0, [r4, #8]
 8003498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800349c:	f7ff fdad 	bl	8002ffa <memset>
 80034a0:	4620      	mov	r0, r4
 80034a2:	bd70      	pop	{r4, r5, r6, pc}

080034a4 <__sinit>:
 80034a4:	6983      	ldr	r3, [r0, #24]
 80034a6:	b510      	push	{r4, lr}
 80034a8:	4604      	mov	r4, r0
 80034aa:	bb33      	cbnz	r3, 80034fa <__sinit+0x56>
 80034ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80034b0:	6503      	str	r3, [r0, #80]	; 0x50
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <__sinit+0x58>)
 80034b4:	4a12      	ldr	r2, [pc, #72]	; (8003500 <__sinit+0x5c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6282      	str	r2, [r0, #40]	; 0x28
 80034ba:	4298      	cmp	r0, r3
 80034bc:	bf04      	itt	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	6183      	streq	r3, [r0, #24]
 80034c2:	f000 f81f 	bl	8003504 <__sfp>
 80034c6:	6060      	str	r0, [r4, #4]
 80034c8:	4620      	mov	r0, r4
 80034ca:	f000 f81b 	bl	8003504 <__sfp>
 80034ce:	60a0      	str	r0, [r4, #8]
 80034d0:	4620      	mov	r0, r4
 80034d2:	f000 f817 	bl	8003504 <__sfp>
 80034d6:	2200      	movs	r2, #0
 80034d8:	60e0      	str	r0, [r4, #12]
 80034da:	2104      	movs	r1, #4
 80034dc:	6860      	ldr	r0, [r4, #4]
 80034de:	f7ff ffa1 	bl	8003424 <std>
 80034e2:	2201      	movs	r2, #1
 80034e4:	2109      	movs	r1, #9
 80034e6:	68a0      	ldr	r0, [r4, #8]
 80034e8:	f7ff ff9c 	bl	8003424 <std>
 80034ec:	2202      	movs	r2, #2
 80034ee:	2112      	movs	r1, #18
 80034f0:	68e0      	ldr	r0, [r4, #12]
 80034f2:	f7ff ff97 	bl	8003424 <std>
 80034f6:	2301      	movs	r3, #1
 80034f8:	61a3      	str	r3, [r4, #24]
 80034fa:	bd10      	pop	{r4, pc}
 80034fc:	080043c4 	.word	0x080043c4
 8003500:	0800346d 	.word	0x0800346d

08003504 <__sfp>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <__sfp+0x70>)
 8003508:	4607      	mov	r7, r0
 800350a:	681e      	ldr	r6, [r3, #0]
 800350c:	69b3      	ldr	r3, [r6, #24]
 800350e:	b913      	cbnz	r3, 8003516 <__sfp+0x12>
 8003510:	4630      	mov	r0, r6
 8003512:	f7ff ffc7 	bl	80034a4 <__sinit>
 8003516:	3648      	adds	r6, #72	; 0x48
 8003518:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800351c:	3b01      	subs	r3, #1
 800351e:	d503      	bpl.n	8003528 <__sfp+0x24>
 8003520:	6833      	ldr	r3, [r6, #0]
 8003522:	b133      	cbz	r3, 8003532 <__sfp+0x2e>
 8003524:	6836      	ldr	r6, [r6, #0]
 8003526:	e7f7      	b.n	8003518 <__sfp+0x14>
 8003528:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800352c:	b16d      	cbz	r5, 800354a <__sfp+0x46>
 800352e:	3468      	adds	r4, #104	; 0x68
 8003530:	e7f4      	b.n	800351c <__sfp+0x18>
 8003532:	2104      	movs	r1, #4
 8003534:	4638      	mov	r0, r7
 8003536:	f7ff ff9f 	bl	8003478 <__sfmoreglue>
 800353a:	6030      	str	r0, [r6, #0]
 800353c:	2800      	cmp	r0, #0
 800353e:	d1f1      	bne.n	8003524 <__sfp+0x20>
 8003540:	230c      	movs	r3, #12
 8003542:	4604      	mov	r4, r0
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	4620      	mov	r0, r4
 8003548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800354a:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <__sfp+0x74>)
 800354c:	6665      	str	r5, [r4, #100]	; 0x64
 800354e:	e9c4 5500 	strd	r5, r5, [r4]
 8003552:	60a5      	str	r5, [r4, #8]
 8003554:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003558:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800355c:	2208      	movs	r2, #8
 800355e:	4629      	mov	r1, r5
 8003560:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003564:	f7ff fd49 	bl	8002ffa <memset>
 8003568:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800356c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003570:	e7e9      	b.n	8003546 <__sfp+0x42>
 8003572:	bf00      	nop
 8003574:	080043c4 	.word	0x080043c4
 8003578:	ffff0001 	.word	0xffff0001

0800357c <_fwalk_reent>:
 800357c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003580:	4680      	mov	r8, r0
 8003582:	4689      	mov	r9, r1
 8003584:	2600      	movs	r6, #0
 8003586:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800358a:	b914      	cbnz	r4, 8003592 <_fwalk_reent+0x16>
 800358c:	4630      	mov	r0, r6
 800358e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003592:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003596:	3f01      	subs	r7, #1
 8003598:	d501      	bpl.n	800359e <_fwalk_reent+0x22>
 800359a:	6824      	ldr	r4, [r4, #0]
 800359c:	e7f5      	b.n	800358a <_fwalk_reent+0xe>
 800359e:	89ab      	ldrh	r3, [r5, #12]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d907      	bls.n	80035b4 <_fwalk_reent+0x38>
 80035a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035a8:	3301      	adds	r3, #1
 80035aa:	d003      	beq.n	80035b4 <_fwalk_reent+0x38>
 80035ac:	4629      	mov	r1, r5
 80035ae:	4640      	mov	r0, r8
 80035b0:	47c8      	blx	r9
 80035b2:	4306      	orrs	r6, r0
 80035b4:	3568      	adds	r5, #104	; 0x68
 80035b6:	e7ee      	b.n	8003596 <_fwalk_reent+0x1a>

080035b8 <__swhatbuf_r>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	460e      	mov	r6, r1
 80035bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c0:	b096      	sub	sp, #88	; 0x58
 80035c2:	2900      	cmp	r1, #0
 80035c4:	4614      	mov	r4, r2
 80035c6:	461d      	mov	r5, r3
 80035c8:	da07      	bge.n	80035da <__swhatbuf_r+0x22>
 80035ca:	2300      	movs	r3, #0
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	89b3      	ldrh	r3, [r6, #12]
 80035d0:	061a      	lsls	r2, r3, #24
 80035d2:	d410      	bmi.n	80035f6 <__swhatbuf_r+0x3e>
 80035d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d8:	e00e      	b.n	80035f8 <__swhatbuf_r+0x40>
 80035da:	466a      	mov	r2, sp
 80035dc:	f000 fd84 	bl	80040e8 <_fstat_r>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	dbf2      	blt.n	80035ca <__swhatbuf_r+0x12>
 80035e4:	9a01      	ldr	r2, [sp, #4]
 80035e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035ee:	425a      	negs	r2, r3
 80035f0:	415a      	adcs	r2, r3
 80035f2:	602a      	str	r2, [r5, #0]
 80035f4:	e7ee      	b.n	80035d4 <__swhatbuf_r+0x1c>
 80035f6:	2340      	movs	r3, #64	; 0x40
 80035f8:	2000      	movs	r0, #0
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	b016      	add	sp, #88	; 0x58
 80035fe:	bd70      	pop	{r4, r5, r6, pc}

08003600 <__smakebuf_r>:
 8003600:	898b      	ldrh	r3, [r1, #12]
 8003602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003604:	079d      	lsls	r5, r3, #30
 8003606:	4606      	mov	r6, r0
 8003608:	460c      	mov	r4, r1
 800360a:	d507      	bpl.n	800361c <__smakebuf_r+0x1c>
 800360c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	6123      	str	r3, [r4, #16]
 8003614:	2301      	movs	r3, #1
 8003616:	6163      	str	r3, [r4, #20]
 8003618:	b002      	add	sp, #8
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	ab01      	add	r3, sp, #4
 800361e:	466a      	mov	r2, sp
 8003620:	f7ff ffca 	bl	80035b8 <__swhatbuf_r>
 8003624:	9900      	ldr	r1, [sp, #0]
 8003626:	4605      	mov	r5, r0
 8003628:	4630      	mov	r0, r6
 800362a:	f000 f875 	bl	8003718 <_malloc_r>
 800362e:	b948      	cbnz	r0, 8003644 <__smakebuf_r+0x44>
 8003630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003634:	059a      	lsls	r2, r3, #22
 8003636:	d4ef      	bmi.n	8003618 <__smakebuf_r+0x18>
 8003638:	f023 0303 	bic.w	r3, r3, #3
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	e7e3      	b.n	800360c <__smakebuf_r+0xc>
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <__smakebuf_r+0x7c>)
 8003646:	62b3      	str	r3, [r6, #40]	; 0x28
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	6020      	str	r0, [r4, #0]
 800364c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	9b00      	ldr	r3, [sp, #0]
 8003654:	6120      	str	r0, [r4, #16]
 8003656:	6163      	str	r3, [r4, #20]
 8003658:	9b01      	ldr	r3, [sp, #4]
 800365a:	b15b      	cbz	r3, 8003674 <__smakebuf_r+0x74>
 800365c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003660:	4630      	mov	r0, r6
 8003662:	f000 fd53 	bl	800410c <_isatty_r>
 8003666:	b128      	cbz	r0, 8003674 <__smakebuf_r+0x74>
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	81a3      	strh	r3, [r4, #12]
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	431d      	orrs	r5, r3
 8003678:	81a5      	strh	r5, [r4, #12]
 800367a:	e7cd      	b.n	8003618 <__smakebuf_r+0x18>
 800367c:	0800346d 	.word	0x0800346d

08003680 <_free_r>:
 8003680:	b538      	push	{r3, r4, r5, lr}
 8003682:	4605      	mov	r5, r0
 8003684:	2900      	cmp	r1, #0
 8003686:	d043      	beq.n	8003710 <_free_r+0x90>
 8003688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800368c:	1f0c      	subs	r4, r1, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	bfb8      	it	lt
 8003692:	18e4      	addlt	r4, r4, r3
 8003694:	f000 fd83 	bl	800419e <__malloc_lock>
 8003698:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <_free_r+0x94>)
 800369a:	6813      	ldr	r3, [r2, #0]
 800369c:	4610      	mov	r0, r2
 800369e:	b933      	cbnz	r3, 80036ae <_free_r+0x2e>
 80036a0:	6063      	str	r3, [r4, #4]
 80036a2:	6014      	str	r4, [r2, #0]
 80036a4:	4628      	mov	r0, r5
 80036a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036aa:	f000 bd79 	b.w	80041a0 <__malloc_unlock>
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	d90b      	bls.n	80036ca <_free_r+0x4a>
 80036b2:	6821      	ldr	r1, [r4, #0]
 80036b4:	1862      	adds	r2, r4, r1
 80036b6:	4293      	cmp	r3, r2
 80036b8:	bf01      	itttt	eq
 80036ba:	681a      	ldreq	r2, [r3, #0]
 80036bc:	685b      	ldreq	r3, [r3, #4]
 80036be:	1852      	addeq	r2, r2, r1
 80036c0:	6022      	streq	r2, [r4, #0]
 80036c2:	6063      	str	r3, [r4, #4]
 80036c4:	6004      	str	r4, [r0, #0]
 80036c6:	e7ed      	b.n	80036a4 <_free_r+0x24>
 80036c8:	4613      	mov	r3, r2
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	b10a      	cbz	r2, 80036d2 <_free_r+0x52>
 80036ce:	42a2      	cmp	r2, r4
 80036d0:	d9fa      	bls.n	80036c8 <_free_r+0x48>
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	1858      	adds	r0, r3, r1
 80036d6:	42a0      	cmp	r0, r4
 80036d8:	d10b      	bne.n	80036f2 <_free_r+0x72>
 80036da:	6820      	ldr	r0, [r4, #0]
 80036dc:	4401      	add	r1, r0
 80036de:	1858      	adds	r0, r3, r1
 80036e0:	4282      	cmp	r2, r0
 80036e2:	6019      	str	r1, [r3, #0]
 80036e4:	d1de      	bne.n	80036a4 <_free_r+0x24>
 80036e6:	6810      	ldr	r0, [r2, #0]
 80036e8:	6852      	ldr	r2, [r2, #4]
 80036ea:	4401      	add	r1, r0
 80036ec:	6019      	str	r1, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	e7d8      	b.n	80036a4 <_free_r+0x24>
 80036f2:	d902      	bls.n	80036fa <_free_r+0x7a>
 80036f4:	230c      	movs	r3, #12
 80036f6:	602b      	str	r3, [r5, #0]
 80036f8:	e7d4      	b.n	80036a4 <_free_r+0x24>
 80036fa:	6820      	ldr	r0, [r4, #0]
 80036fc:	1821      	adds	r1, r4, r0
 80036fe:	428a      	cmp	r2, r1
 8003700:	bf01      	itttt	eq
 8003702:	6811      	ldreq	r1, [r2, #0]
 8003704:	6852      	ldreq	r2, [r2, #4]
 8003706:	1809      	addeq	r1, r1, r0
 8003708:	6021      	streq	r1, [r4, #0]
 800370a:	6062      	str	r2, [r4, #4]
 800370c:	605c      	str	r4, [r3, #4]
 800370e:	e7c9      	b.n	80036a4 <_free_r+0x24>
 8003710:	bd38      	pop	{r3, r4, r5, pc}
 8003712:	bf00      	nop
 8003714:	20000090 	.word	0x20000090

08003718 <_malloc_r>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	1ccd      	adds	r5, r1, #3
 800371c:	f025 0503 	bic.w	r5, r5, #3
 8003720:	3508      	adds	r5, #8
 8003722:	2d0c      	cmp	r5, #12
 8003724:	bf38      	it	cc
 8003726:	250c      	movcc	r5, #12
 8003728:	2d00      	cmp	r5, #0
 800372a:	4606      	mov	r6, r0
 800372c:	db01      	blt.n	8003732 <_malloc_r+0x1a>
 800372e:	42a9      	cmp	r1, r5
 8003730:	d903      	bls.n	800373a <_malloc_r+0x22>
 8003732:	230c      	movs	r3, #12
 8003734:	6033      	str	r3, [r6, #0]
 8003736:	2000      	movs	r0, #0
 8003738:	bd70      	pop	{r4, r5, r6, pc}
 800373a:	f000 fd30 	bl	800419e <__malloc_lock>
 800373e:	4a21      	ldr	r2, [pc, #132]	; (80037c4 <_malloc_r+0xac>)
 8003740:	6814      	ldr	r4, [r2, #0]
 8003742:	4621      	mov	r1, r4
 8003744:	b991      	cbnz	r1, 800376c <_malloc_r+0x54>
 8003746:	4c20      	ldr	r4, [pc, #128]	; (80037c8 <_malloc_r+0xb0>)
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	b91b      	cbnz	r3, 8003754 <_malloc_r+0x3c>
 800374c:	4630      	mov	r0, r6
 800374e:	f000 fc55 	bl	8003ffc <_sbrk_r>
 8003752:	6020      	str	r0, [r4, #0]
 8003754:	4629      	mov	r1, r5
 8003756:	4630      	mov	r0, r6
 8003758:	f000 fc50 	bl	8003ffc <_sbrk_r>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	d124      	bne.n	80037aa <_malloc_r+0x92>
 8003760:	230c      	movs	r3, #12
 8003762:	4630      	mov	r0, r6
 8003764:	6033      	str	r3, [r6, #0]
 8003766:	f000 fd1b 	bl	80041a0 <__malloc_unlock>
 800376a:	e7e4      	b.n	8003736 <_malloc_r+0x1e>
 800376c:	680b      	ldr	r3, [r1, #0]
 800376e:	1b5b      	subs	r3, r3, r5
 8003770:	d418      	bmi.n	80037a4 <_malloc_r+0x8c>
 8003772:	2b0b      	cmp	r3, #11
 8003774:	d90f      	bls.n	8003796 <_malloc_r+0x7e>
 8003776:	600b      	str	r3, [r1, #0]
 8003778:	18cc      	adds	r4, r1, r3
 800377a:	50cd      	str	r5, [r1, r3]
 800377c:	4630      	mov	r0, r6
 800377e:	f000 fd0f 	bl	80041a0 <__malloc_unlock>
 8003782:	f104 000b 	add.w	r0, r4, #11
 8003786:	1d23      	adds	r3, r4, #4
 8003788:	f020 0007 	bic.w	r0, r0, #7
 800378c:	1ac3      	subs	r3, r0, r3
 800378e:	d0d3      	beq.n	8003738 <_malloc_r+0x20>
 8003790:	425a      	negs	r2, r3
 8003792:	50e2      	str	r2, [r4, r3]
 8003794:	e7d0      	b.n	8003738 <_malloc_r+0x20>
 8003796:	684b      	ldr	r3, [r1, #4]
 8003798:	428c      	cmp	r4, r1
 800379a:	bf16      	itet	ne
 800379c:	6063      	strne	r3, [r4, #4]
 800379e:	6013      	streq	r3, [r2, #0]
 80037a0:	460c      	movne	r4, r1
 80037a2:	e7eb      	b.n	800377c <_malloc_r+0x64>
 80037a4:	460c      	mov	r4, r1
 80037a6:	6849      	ldr	r1, [r1, #4]
 80037a8:	e7cc      	b.n	8003744 <_malloc_r+0x2c>
 80037aa:	1cc4      	adds	r4, r0, #3
 80037ac:	f024 0403 	bic.w	r4, r4, #3
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d005      	beq.n	80037c0 <_malloc_r+0xa8>
 80037b4:	1a21      	subs	r1, r4, r0
 80037b6:	4630      	mov	r0, r6
 80037b8:	f000 fc20 	bl	8003ffc <_sbrk_r>
 80037bc:	3001      	adds	r0, #1
 80037be:	d0cf      	beq.n	8003760 <_malloc_r+0x48>
 80037c0:	6025      	str	r5, [r4, #0]
 80037c2:	e7db      	b.n	800377c <_malloc_r+0x64>
 80037c4:	20000090 	.word	0x20000090
 80037c8:	20000094 	.word	0x20000094

080037cc <__ssputs_r>:
 80037cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d0:	688e      	ldr	r6, [r1, #8]
 80037d2:	4682      	mov	sl, r0
 80037d4:	429e      	cmp	r6, r3
 80037d6:	460c      	mov	r4, r1
 80037d8:	4690      	mov	r8, r2
 80037da:	4699      	mov	r9, r3
 80037dc:	d837      	bhi.n	800384e <__ssputs_r+0x82>
 80037de:	898a      	ldrh	r2, [r1, #12]
 80037e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037e4:	d031      	beq.n	800384a <__ssputs_r+0x7e>
 80037e6:	2302      	movs	r3, #2
 80037e8:	6825      	ldr	r5, [r4, #0]
 80037ea:	6909      	ldr	r1, [r1, #16]
 80037ec:	1a6f      	subs	r7, r5, r1
 80037ee:	6965      	ldr	r5, [r4, #20]
 80037f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80037f8:	f109 0301 	add.w	r3, r9, #1
 80037fc:	443b      	add	r3, r7
 80037fe:	429d      	cmp	r5, r3
 8003800:	bf38      	it	cc
 8003802:	461d      	movcc	r5, r3
 8003804:	0553      	lsls	r3, r2, #21
 8003806:	d530      	bpl.n	800386a <__ssputs_r+0x9e>
 8003808:	4629      	mov	r1, r5
 800380a:	f7ff ff85 	bl	8003718 <_malloc_r>
 800380e:	4606      	mov	r6, r0
 8003810:	b950      	cbnz	r0, 8003828 <__ssputs_r+0x5c>
 8003812:	230c      	movs	r3, #12
 8003814:	f04f 30ff 	mov.w	r0, #4294967295
 8003818:	f8ca 3000 	str.w	r3, [sl]
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003822:	81a3      	strh	r3, [r4, #12]
 8003824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003828:	463a      	mov	r2, r7
 800382a:	6921      	ldr	r1, [r4, #16]
 800382c:	f7ff fbda 	bl	8002fe4 <memcpy>
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	81a3      	strh	r3, [r4, #12]
 800383c:	6126      	str	r6, [r4, #16]
 800383e:	443e      	add	r6, r7
 8003840:	6026      	str	r6, [r4, #0]
 8003842:	464e      	mov	r6, r9
 8003844:	6165      	str	r5, [r4, #20]
 8003846:	1bed      	subs	r5, r5, r7
 8003848:	60a5      	str	r5, [r4, #8]
 800384a:	454e      	cmp	r6, r9
 800384c:	d900      	bls.n	8003850 <__ssputs_r+0x84>
 800384e:	464e      	mov	r6, r9
 8003850:	4632      	mov	r2, r6
 8003852:	4641      	mov	r1, r8
 8003854:	6820      	ldr	r0, [r4, #0]
 8003856:	f000 fc89 	bl	800416c <memmove>
 800385a:	68a3      	ldr	r3, [r4, #8]
 800385c:	2000      	movs	r0, #0
 800385e:	1b9b      	subs	r3, r3, r6
 8003860:	60a3      	str	r3, [r4, #8]
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	441e      	add	r6, r3
 8003866:	6026      	str	r6, [r4, #0]
 8003868:	e7dc      	b.n	8003824 <__ssputs_r+0x58>
 800386a:	462a      	mov	r2, r5
 800386c:	f000 fc99 	bl	80041a2 <_realloc_r>
 8003870:	4606      	mov	r6, r0
 8003872:	2800      	cmp	r0, #0
 8003874:	d1e2      	bne.n	800383c <__ssputs_r+0x70>
 8003876:	6921      	ldr	r1, [r4, #16]
 8003878:	4650      	mov	r0, sl
 800387a:	f7ff ff01 	bl	8003680 <_free_r>
 800387e:	e7c8      	b.n	8003812 <__ssputs_r+0x46>

08003880 <_svfiprintf_r>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	461d      	mov	r5, r3
 8003886:	898b      	ldrh	r3, [r1, #12]
 8003888:	b09d      	sub	sp, #116	; 0x74
 800388a:	061f      	lsls	r7, r3, #24
 800388c:	4680      	mov	r8, r0
 800388e:	460c      	mov	r4, r1
 8003890:	4616      	mov	r6, r2
 8003892:	d50f      	bpl.n	80038b4 <_svfiprintf_r+0x34>
 8003894:	690b      	ldr	r3, [r1, #16]
 8003896:	b96b      	cbnz	r3, 80038b4 <_svfiprintf_r+0x34>
 8003898:	2140      	movs	r1, #64	; 0x40
 800389a:	f7ff ff3d 	bl	8003718 <_malloc_r>
 800389e:	6020      	str	r0, [r4, #0]
 80038a0:	6120      	str	r0, [r4, #16]
 80038a2:	b928      	cbnz	r0, 80038b0 <_svfiprintf_r+0x30>
 80038a4:	230c      	movs	r3, #12
 80038a6:	f8c8 3000 	str.w	r3, [r8]
 80038aa:	f04f 30ff 	mov.w	r0, #4294967295
 80038ae:	e0c8      	b.n	8003a42 <_svfiprintf_r+0x1c2>
 80038b0:	2340      	movs	r3, #64	; 0x40
 80038b2:	6163      	str	r3, [r4, #20]
 80038b4:	2300      	movs	r3, #0
 80038b6:	9309      	str	r3, [sp, #36]	; 0x24
 80038b8:	2320      	movs	r3, #32
 80038ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038be:	2330      	movs	r3, #48	; 0x30
 80038c0:	f04f 0b01 	mov.w	fp, #1
 80038c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038c8:	9503      	str	r5, [sp, #12]
 80038ca:	4637      	mov	r7, r6
 80038cc:	463d      	mov	r5, r7
 80038ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038d2:	b10b      	cbz	r3, 80038d8 <_svfiprintf_r+0x58>
 80038d4:	2b25      	cmp	r3, #37	; 0x25
 80038d6:	d13e      	bne.n	8003956 <_svfiprintf_r+0xd6>
 80038d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80038dc:	d00b      	beq.n	80038f6 <_svfiprintf_r+0x76>
 80038de:	4653      	mov	r3, sl
 80038e0:	4632      	mov	r2, r6
 80038e2:	4621      	mov	r1, r4
 80038e4:	4640      	mov	r0, r8
 80038e6:	f7ff ff71 	bl	80037cc <__ssputs_r>
 80038ea:	3001      	adds	r0, #1
 80038ec:	f000 80a4 	beq.w	8003a38 <_svfiprintf_r+0x1b8>
 80038f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f2:	4453      	add	r3, sl
 80038f4:	9309      	str	r3, [sp, #36]	; 0x24
 80038f6:	783b      	ldrb	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 809d 	beq.w	8003a38 <_svfiprintf_r+0x1b8>
 80038fe:	2300      	movs	r3, #0
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003908:	9304      	str	r3, [sp, #16]
 800390a:	9307      	str	r3, [sp, #28]
 800390c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003910:	931a      	str	r3, [sp, #104]	; 0x68
 8003912:	462f      	mov	r7, r5
 8003914:	2205      	movs	r2, #5
 8003916:	f817 1b01 	ldrb.w	r1, [r7], #1
 800391a:	4850      	ldr	r0, [pc, #320]	; (8003a5c <_svfiprintf_r+0x1dc>)
 800391c:	f000 fc18 	bl	8004150 <memchr>
 8003920:	9b04      	ldr	r3, [sp, #16]
 8003922:	b9d0      	cbnz	r0, 800395a <_svfiprintf_r+0xda>
 8003924:	06d9      	lsls	r1, r3, #27
 8003926:	bf44      	itt	mi
 8003928:	2220      	movmi	r2, #32
 800392a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800392e:	071a      	lsls	r2, r3, #28
 8003930:	bf44      	itt	mi
 8003932:	222b      	movmi	r2, #43	; 0x2b
 8003934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003938:	782a      	ldrb	r2, [r5, #0]
 800393a:	2a2a      	cmp	r2, #42	; 0x2a
 800393c:	d015      	beq.n	800396a <_svfiprintf_r+0xea>
 800393e:	462f      	mov	r7, r5
 8003940:	2000      	movs	r0, #0
 8003942:	250a      	movs	r5, #10
 8003944:	9a07      	ldr	r2, [sp, #28]
 8003946:	4639      	mov	r1, r7
 8003948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800394c:	3b30      	subs	r3, #48	; 0x30
 800394e:	2b09      	cmp	r3, #9
 8003950:	d94d      	bls.n	80039ee <_svfiprintf_r+0x16e>
 8003952:	b1b8      	cbz	r0, 8003984 <_svfiprintf_r+0x104>
 8003954:	e00f      	b.n	8003976 <_svfiprintf_r+0xf6>
 8003956:	462f      	mov	r7, r5
 8003958:	e7b8      	b.n	80038cc <_svfiprintf_r+0x4c>
 800395a:	4a40      	ldr	r2, [pc, #256]	; (8003a5c <_svfiprintf_r+0x1dc>)
 800395c:	463d      	mov	r5, r7
 800395e:	1a80      	subs	r0, r0, r2
 8003960:	fa0b f000 	lsl.w	r0, fp, r0
 8003964:	4318      	orrs	r0, r3
 8003966:	9004      	str	r0, [sp, #16]
 8003968:	e7d3      	b.n	8003912 <_svfiprintf_r+0x92>
 800396a:	9a03      	ldr	r2, [sp, #12]
 800396c:	1d11      	adds	r1, r2, #4
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	9103      	str	r1, [sp, #12]
 8003972:	2a00      	cmp	r2, #0
 8003974:	db01      	blt.n	800397a <_svfiprintf_r+0xfa>
 8003976:	9207      	str	r2, [sp, #28]
 8003978:	e004      	b.n	8003984 <_svfiprintf_r+0x104>
 800397a:	4252      	negs	r2, r2
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	9207      	str	r2, [sp, #28]
 8003982:	9304      	str	r3, [sp, #16]
 8003984:	783b      	ldrb	r3, [r7, #0]
 8003986:	2b2e      	cmp	r3, #46	; 0x2e
 8003988:	d10c      	bne.n	80039a4 <_svfiprintf_r+0x124>
 800398a:	787b      	ldrb	r3, [r7, #1]
 800398c:	2b2a      	cmp	r3, #42	; 0x2a
 800398e:	d133      	bne.n	80039f8 <_svfiprintf_r+0x178>
 8003990:	9b03      	ldr	r3, [sp, #12]
 8003992:	3702      	adds	r7, #2
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	9203      	str	r2, [sp, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	bfb8      	it	lt
 800399e:	f04f 33ff 	movlt.w	r3, #4294967295
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	4d2e      	ldr	r5, [pc, #184]	; (8003a60 <_svfiprintf_r+0x1e0>)
 80039a6:	2203      	movs	r2, #3
 80039a8:	7839      	ldrb	r1, [r7, #0]
 80039aa:	4628      	mov	r0, r5
 80039ac:	f000 fbd0 	bl	8004150 <memchr>
 80039b0:	b138      	cbz	r0, 80039c2 <_svfiprintf_r+0x142>
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	1b40      	subs	r0, r0, r5
 80039b6:	fa03 f000 	lsl.w	r0, r3, r0
 80039ba:	9b04      	ldr	r3, [sp, #16]
 80039bc:	3701      	adds	r7, #1
 80039be:	4303      	orrs	r3, r0
 80039c0:	9304      	str	r3, [sp, #16]
 80039c2:	7839      	ldrb	r1, [r7, #0]
 80039c4:	2206      	movs	r2, #6
 80039c6:	4827      	ldr	r0, [pc, #156]	; (8003a64 <_svfiprintf_r+0x1e4>)
 80039c8:	1c7e      	adds	r6, r7, #1
 80039ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039ce:	f000 fbbf 	bl	8004150 <memchr>
 80039d2:	2800      	cmp	r0, #0
 80039d4:	d038      	beq.n	8003a48 <_svfiprintf_r+0x1c8>
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <_svfiprintf_r+0x1e8>)
 80039d8:	bb13      	cbnz	r3, 8003a20 <_svfiprintf_r+0x1a0>
 80039da:	9b03      	ldr	r3, [sp, #12]
 80039dc:	3307      	adds	r3, #7
 80039de:	f023 0307 	bic.w	r3, r3, #7
 80039e2:	3308      	adds	r3, #8
 80039e4:	9303      	str	r3, [sp, #12]
 80039e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039e8:	444b      	add	r3, r9
 80039ea:	9309      	str	r3, [sp, #36]	; 0x24
 80039ec:	e76d      	b.n	80038ca <_svfiprintf_r+0x4a>
 80039ee:	fb05 3202 	mla	r2, r5, r2, r3
 80039f2:	2001      	movs	r0, #1
 80039f4:	460f      	mov	r7, r1
 80039f6:	e7a6      	b.n	8003946 <_svfiprintf_r+0xc6>
 80039f8:	2300      	movs	r3, #0
 80039fa:	250a      	movs	r5, #10
 80039fc:	4619      	mov	r1, r3
 80039fe:	3701      	adds	r7, #1
 8003a00:	9305      	str	r3, [sp, #20]
 8003a02:	4638      	mov	r0, r7
 8003a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a08:	3a30      	subs	r2, #48	; 0x30
 8003a0a:	2a09      	cmp	r2, #9
 8003a0c:	d903      	bls.n	8003a16 <_svfiprintf_r+0x196>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0c8      	beq.n	80039a4 <_svfiprintf_r+0x124>
 8003a12:	9105      	str	r1, [sp, #20]
 8003a14:	e7c6      	b.n	80039a4 <_svfiprintf_r+0x124>
 8003a16:	fb05 2101 	mla	r1, r5, r1, r2
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	4607      	mov	r7, r0
 8003a1e:	e7f0      	b.n	8003a02 <_svfiprintf_r+0x182>
 8003a20:	ab03      	add	r3, sp, #12
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	4622      	mov	r2, r4
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <_svfiprintf_r+0x1ec>)
 8003a28:	a904      	add	r1, sp, #16
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	f3af 8000 	nop.w
 8003a30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a34:	4681      	mov	r9, r0
 8003a36:	d1d6      	bne.n	80039e6 <_svfiprintf_r+0x166>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	065b      	lsls	r3, r3, #25
 8003a3c:	f53f af35 	bmi.w	80038aa <_svfiprintf_r+0x2a>
 8003a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a42:	b01d      	add	sp, #116	; 0x74
 8003a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a48:	ab03      	add	r3, sp, #12
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <_svfiprintf_r+0x1ec>)
 8003a50:	a904      	add	r1, sp, #16
 8003a52:	4640      	mov	r0, r8
 8003a54:	f000 f9c0 	bl	8003dd8 <_printf_i>
 8003a58:	e7ea      	b.n	8003a30 <_svfiprintf_r+0x1b0>
 8003a5a:	bf00      	nop
 8003a5c:	08004428 	.word	0x08004428
 8003a60:	0800442e 	.word	0x0800442e
 8003a64:	08004432 	.word	0x08004432
 8003a68:	00000000 	.word	0x00000000
 8003a6c:	080037cd 	.word	0x080037cd

08003a70 <__sfputc_r>:
 8003a70:	6893      	ldr	r3, [r2, #8]
 8003a72:	b410      	push	{r4}
 8003a74:	3b01      	subs	r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	6093      	str	r3, [r2, #8]
 8003a7a:	da07      	bge.n	8003a8c <__sfputc_r+0x1c>
 8003a7c:	6994      	ldr	r4, [r2, #24]
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	db01      	blt.n	8003a86 <__sfputc_r+0x16>
 8003a82:	290a      	cmp	r1, #10
 8003a84:	d102      	bne.n	8003a8c <__sfputc_r+0x1c>
 8003a86:	bc10      	pop	{r4}
 8003a88:	f7ff bb5c 	b.w	8003144 <__swbuf_r>
 8003a8c:	6813      	ldr	r3, [r2, #0]
 8003a8e:	1c58      	adds	r0, r3, #1
 8003a90:	6010      	str	r0, [r2, #0]
 8003a92:	7019      	strb	r1, [r3, #0]
 8003a94:	4608      	mov	r0, r1
 8003a96:	bc10      	pop	{r4}
 8003a98:	4770      	bx	lr

08003a9a <__sfputs_r>:
 8003a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	460f      	mov	r7, r1
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	18d5      	adds	r5, r2, r3
 8003aa4:	42ac      	cmp	r4, r5
 8003aa6:	d101      	bne.n	8003aac <__sfputs_r+0x12>
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e007      	b.n	8003abc <__sfputs_r+0x22>
 8003aac:	463a      	mov	r2, r7
 8003aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f7ff ffdc 	bl	8003a70 <__sfputc_r>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d1f3      	bne.n	8003aa4 <__sfputs_r+0xa>
 8003abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ac0 <_vfiprintf_r>:
 8003ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	b09d      	sub	sp, #116	; 0x74
 8003ac8:	4617      	mov	r7, r2
 8003aca:	461d      	mov	r5, r3
 8003acc:	4606      	mov	r6, r0
 8003ace:	b118      	cbz	r0, 8003ad8 <_vfiprintf_r+0x18>
 8003ad0:	6983      	ldr	r3, [r0, #24]
 8003ad2:	b90b      	cbnz	r3, 8003ad8 <_vfiprintf_r+0x18>
 8003ad4:	f7ff fce6 	bl	80034a4 <__sinit>
 8003ad8:	4b7c      	ldr	r3, [pc, #496]	; (8003ccc <_vfiprintf_r+0x20c>)
 8003ada:	429c      	cmp	r4, r3
 8003adc:	d158      	bne.n	8003b90 <_vfiprintf_r+0xd0>
 8003ade:	6874      	ldr	r4, [r6, #4]
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	0718      	lsls	r0, r3, #28
 8003ae4:	d55e      	bpl.n	8003ba4 <_vfiprintf_r+0xe4>
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d05b      	beq.n	8003ba4 <_vfiprintf_r+0xe4>
 8003aec:	2300      	movs	r3, #0
 8003aee:	9309      	str	r3, [sp, #36]	; 0x24
 8003af0:	2320      	movs	r3, #32
 8003af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003af6:	2330      	movs	r3, #48	; 0x30
 8003af8:	f04f 0b01 	mov.w	fp, #1
 8003afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b00:	9503      	str	r5, [sp, #12]
 8003b02:	46b8      	mov	r8, r7
 8003b04:	4645      	mov	r5, r8
 8003b06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b0a:	b10b      	cbz	r3, 8003b10 <_vfiprintf_r+0x50>
 8003b0c:	2b25      	cmp	r3, #37	; 0x25
 8003b0e:	d154      	bne.n	8003bba <_vfiprintf_r+0xfa>
 8003b10:	ebb8 0a07 	subs.w	sl, r8, r7
 8003b14:	d00b      	beq.n	8003b2e <_vfiprintf_r+0x6e>
 8003b16:	4653      	mov	r3, sl
 8003b18:	463a      	mov	r2, r7
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f7ff ffbc 	bl	8003a9a <__sfputs_r>
 8003b22:	3001      	adds	r0, #1
 8003b24:	f000 80c2 	beq.w	8003cac <_vfiprintf_r+0x1ec>
 8003b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b2a:	4453      	add	r3, sl
 8003b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b2e:	f898 3000 	ldrb.w	r3, [r8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80ba 	beq.w	8003cac <_vfiprintf_r+0x1ec>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b42:	9304      	str	r3, [sp, #16]
 8003b44:	9307      	str	r3, [sp, #28]
 8003b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8003b4c:	46a8      	mov	r8, r5
 8003b4e:	2205      	movs	r2, #5
 8003b50:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003b54:	485e      	ldr	r0, [pc, #376]	; (8003cd0 <_vfiprintf_r+0x210>)
 8003b56:	f000 fafb 	bl	8004150 <memchr>
 8003b5a:	9b04      	ldr	r3, [sp, #16]
 8003b5c:	bb78      	cbnz	r0, 8003bbe <_vfiprintf_r+0xfe>
 8003b5e:	06d9      	lsls	r1, r3, #27
 8003b60:	bf44      	itt	mi
 8003b62:	2220      	movmi	r2, #32
 8003b64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b68:	071a      	lsls	r2, r3, #28
 8003b6a:	bf44      	itt	mi
 8003b6c:	222b      	movmi	r2, #43	; 0x2b
 8003b6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b72:	782a      	ldrb	r2, [r5, #0]
 8003b74:	2a2a      	cmp	r2, #42	; 0x2a
 8003b76:	d02a      	beq.n	8003bce <_vfiprintf_r+0x10e>
 8003b78:	46a8      	mov	r8, r5
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	250a      	movs	r5, #10
 8003b7e:	9a07      	ldr	r2, [sp, #28]
 8003b80:	4641      	mov	r1, r8
 8003b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b86:	3b30      	subs	r3, #48	; 0x30
 8003b88:	2b09      	cmp	r3, #9
 8003b8a:	d969      	bls.n	8003c60 <_vfiprintf_r+0x1a0>
 8003b8c:	b360      	cbz	r0, 8003be8 <_vfiprintf_r+0x128>
 8003b8e:	e024      	b.n	8003bda <_vfiprintf_r+0x11a>
 8003b90:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <_vfiprintf_r+0x214>)
 8003b92:	429c      	cmp	r4, r3
 8003b94:	d101      	bne.n	8003b9a <_vfiprintf_r+0xda>
 8003b96:	68b4      	ldr	r4, [r6, #8]
 8003b98:	e7a2      	b.n	8003ae0 <_vfiprintf_r+0x20>
 8003b9a:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <_vfiprintf_r+0x218>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	bf08      	it	eq
 8003ba0:	68f4      	ldreq	r4, [r6, #12]
 8003ba2:	e79d      	b.n	8003ae0 <_vfiprintf_r+0x20>
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f7ff fb1e 	bl	80031e8 <__swsetup_r>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d09d      	beq.n	8003aec <_vfiprintf_r+0x2c>
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb4:	b01d      	add	sp, #116	; 0x74
 8003bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bba:	46a8      	mov	r8, r5
 8003bbc:	e7a2      	b.n	8003b04 <_vfiprintf_r+0x44>
 8003bbe:	4a44      	ldr	r2, [pc, #272]	; (8003cd0 <_vfiprintf_r+0x210>)
 8003bc0:	4645      	mov	r5, r8
 8003bc2:	1a80      	subs	r0, r0, r2
 8003bc4:	fa0b f000 	lsl.w	r0, fp, r0
 8003bc8:	4318      	orrs	r0, r3
 8003bca:	9004      	str	r0, [sp, #16]
 8003bcc:	e7be      	b.n	8003b4c <_vfiprintf_r+0x8c>
 8003bce:	9a03      	ldr	r2, [sp, #12]
 8003bd0:	1d11      	adds	r1, r2, #4
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	9103      	str	r1, [sp, #12]
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	db01      	blt.n	8003bde <_vfiprintf_r+0x11e>
 8003bda:	9207      	str	r2, [sp, #28]
 8003bdc:	e004      	b.n	8003be8 <_vfiprintf_r+0x128>
 8003bde:	4252      	negs	r2, r2
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	9207      	str	r2, [sp, #28]
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	f898 3000 	ldrb.w	r3, [r8]
 8003bec:	2b2e      	cmp	r3, #46	; 0x2e
 8003bee:	d10e      	bne.n	8003c0e <_vfiprintf_r+0x14e>
 8003bf0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf6:	d138      	bne.n	8003c6a <_vfiprintf_r+0x1aa>
 8003bf8:	9b03      	ldr	r3, [sp, #12]
 8003bfa:	f108 0802 	add.w	r8, r8, #2
 8003bfe:	1d1a      	adds	r2, r3, #4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	9203      	str	r2, [sp, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bfb8      	it	lt
 8003c08:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c0c:	9305      	str	r3, [sp, #20]
 8003c0e:	4d33      	ldr	r5, [pc, #204]	; (8003cdc <_vfiprintf_r+0x21c>)
 8003c10:	2203      	movs	r2, #3
 8003c12:	f898 1000 	ldrb.w	r1, [r8]
 8003c16:	4628      	mov	r0, r5
 8003c18:	f000 fa9a 	bl	8004150 <memchr>
 8003c1c:	b140      	cbz	r0, 8003c30 <_vfiprintf_r+0x170>
 8003c1e:	2340      	movs	r3, #64	; 0x40
 8003c20:	1b40      	subs	r0, r0, r5
 8003c22:	fa03 f000 	lsl.w	r0, r3, r0
 8003c26:	9b04      	ldr	r3, [sp, #16]
 8003c28:	f108 0801 	add.w	r8, r8, #1
 8003c2c:	4303      	orrs	r3, r0
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	f898 1000 	ldrb.w	r1, [r8]
 8003c34:	2206      	movs	r2, #6
 8003c36:	482a      	ldr	r0, [pc, #168]	; (8003ce0 <_vfiprintf_r+0x220>)
 8003c38:	f108 0701 	add.w	r7, r8, #1
 8003c3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c40:	f000 fa86 	bl	8004150 <memchr>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d037      	beq.n	8003cb8 <_vfiprintf_r+0x1f8>
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <_vfiprintf_r+0x224>)
 8003c4a:	bb1b      	cbnz	r3, 8003c94 <_vfiprintf_r+0x1d4>
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	3307      	adds	r3, #7
 8003c50:	f023 0307 	bic.w	r3, r3, #7
 8003c54:	3308      	adds	r3, #8
 8003c56:	9303      	str	r3, [sp, #12]
 8003c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c5a:	444b      	add	r3, r9
 8003c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c5e:	e750      	b.n	8003b02 <_vfiprintf_r+0x42>
 8003c60:	fb05 3202 	mla	r2, r5, r2, r3
 8003c64:	2001      	movs	r0, #1
 8003c66:	4688      	mov	r8, r1
 8003c68:	e78a      	b.n	8003b80 <_vfiprintf_r+0xc0>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	250a      	movs	r5, #10
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f108 0801 	add.w	r8, r8, #1
 8003c74:	9305      	str	r3, [sp, #20]
 8003c76:	4640      	mov	r0, r8
 8003c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c7c:	3a30      	subs	r2, #48	; 0x30
 8003c7e:	2a09      	cmp	r2, #9
 8003c80:	d903      	bls.n	8003c8a <_vfiprintf_r+0x1ca>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0c3      	beq.n	8003c0e <_vfiprintf_r+0x14e>
 8003c86:	9105      	str	r1, [sp, #20]
 8003c88:	e7c1      	b.n	8003c0e <_vfiprintf_r+0x14e>
 8003c8a:	fb05 2101 	mla	r1, r5, r1, r2
 8003c8e:	2301      	movs	r3, #1
 8003c90:	4680      	mov	r8, r0
 8003c92:	e7f0      	b.n	8003c76 <_vfiprintf_r+0x1b6>
 8003c94:	ab03      	add	r3, sp, #12
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4622      	mov	r2, r4
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <_vfiprintf_r+0x228>)
 8003c9c:	a904      	add	r1, sp, #16
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f3af 8000 	nop.w
 8003ca4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ca8:	4681      	mov	r9, r0
 8003caa:	d1d5      	bne.n	8003c58 <_vfiprintf_r+0x198>
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	065b      	lsls	r3, r3, #25
 8003cb0:	f53f af7e 	bmi.w	8003bb0 <_vfiprintf_r+0xf0>
 8003cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cb6:	e77d      	b.n	8003bb4 <_vfiprintf_r+0xf4>
 8003cb8:	ab03      	add	r3, sp, #12
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <_vfiprintf_r+0x228>)
 8003cc0:	a904      	add	r1, sp, #16
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	f000 f888 	bl	8003dd8 <_printf_i>
 8003cc8:	e7ec      	b.n	8003ca4 <_vfiprintf_r+0x1e4>
 8003cca:	bf00      	nop
 8003ccc:	080043e8 	.word	0x080043e8
 8003cd0:	08004428 	.word	0x08004428
 8003cd4:	08004408 	.word	0x08004408
 8003cd8:	080043c8 	.word	0x080043c8
 8003cdc:	0800442e 	.word	0x0800442e
 8003ce0:	08004432 	.word	0x08004432
 8003ce4:	00000000 	.word	0x00000000
 8003ce8:	08003a9b 	.word	0x08003a9b

08003cec <_printf_common>:
 8003cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf0:	4691      	mov	r9, r2
 8003cf2:	461f      	mov	r7, r3
 8003cf4:	688a      	ldr	r2, [r1, #8]
 8003cf6:	690b      	ldr	r3, [r1, #16]
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	bfb8      	it	lt
 8003cfe:	4613      	movlt	r3, r2
 8003d00:	f8c9 3000 	str.w	r3, [r9]
 8003d04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d08:	460c      	mov	r4, r1
 8003d0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d0e:	b112      	cbz	r2, 8003d16 <_printf_common+0x2a>
 8003d10:	3301      	adds	r3, #1
 8003d12:	f8c9 3000 	str.w	r3, [r9]
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	0699      	lsls	r1, r3, #26
 8003d1a:	bf42      	ittt	mi
 8003d1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d20:	3302      	addmi	r3, #2
 8003d22:	f8c9 3000 	strmi.w	r3, [r9]
 8003d26:	6825      	ldr	r5, [r4, #0]
 8003d28:	f015 0506 	ands.w	r5, r5, #6
 8003d2c:	d107      	bne.n	8003d3e <_printf_common+0x52>
 8003d2e:	f104 0a19 	add.w	sl, r4, #25
 8003d32:	68e3      	ldr	r3, [r4, #12]
 8003d34:	f8d9 2000 	ldr.w	r2, [r9]
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	42ab      	cmp	r3, r5
 8003d3c:	dc29      	bgt.n	8003d92 <_printf_common+0xa6>
 8003d3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	3300      	adds	r3, #0
 8003d46:	bf18      	it	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	0692      	lsls	r2, r2, #26
 8003d4c:	d42e      	bmi.n	8003dac <_printf_common+0xc0>
 8003d4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d52:	4639      	mov	r1, r7
 8003d54:	4630      	mov	r0, r6
 8003d56:	47c0      	blx	r8
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d021      	beq.n	8003da0 <_printf_common+0xb4>
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	68e5      	ldr	r5, [r4, #12]
 8003d60:	f003 0306 	and.w	r3, r3, #6
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	bf18      	it	ne
 8003d68:	2500      	movne	r5, #0
 8003d6a:	f8d9 2000 	ldr.w	r2, [r9]
 8003d6e:	f04f 0900 	mov.w	r9, #0
 8003d72:	bf08      	it	eq
 8003d74:	1aad      	subeq	r5, r5, r2
 8003d76:	68a3      	ldr	r3, [r4, #8]
 8003d78:	6922      	ldr	r2, [r4, #16]
 8003d7a:	bf08      	it	eq
 8003d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d80:	4293      	cmp	r3, r2
 8003d82:	bfc4      	itt	gt
 8003d84:	1a9b      	subgt	r3, r3, r2
 8003d86:	18ed      	addgt	r5, r5, r3
 8003d88:	341a      	adds	r4, #26
 8003d8a:	454d      	cmp	r5, r9
 8003d8c:	d11a      	bne.n	8003dc4 <_printf_common+0xd8>
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e008      	b.n	8003da4 <_printf_common+0xb8>
 8003d92:	2301      	movs	r3, #1
 8003d94:	4652      	mov	r2, sl
 8003d96:	4639      	mov	r1, r7
 8003d98:	4630      	mov	r0, r6
 8003d9a:	47c0      	blx	r8
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d103      	bne.n	8003da8 <_printf_common+0xbc>
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da8:	3501      	adds	r5, #1
 8003daa:	e7c2      	b.n	8003d32 <_printf_common+0x46>
 8003dac:	2030      	movs	r0, #48	; 0x30
 8003dae:	18e1      	adds	r1, r4, r3
 8003db0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dba:	4422      	add	r2, r4
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dc2:	e7c4      	b.n	8003d4e <_printf_common+0x62>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	4639      	mov	r1, r7
 8003dca:	4630      	mov	r0, r6
 8003dcc:	47c0      	blx	r8
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d0e6      	beq.n	8003da0 <_printf_common+0xb4>
 8003dd2:	f109 0901 	add.w	r9, r9, #1
 8003dd6:	e7d8      	b.n	8003d8a <_printf_common+0x9e>

08003dd8 <_printf_i>:
 8003dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ddc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003de0:	460c      	mov	r4, r1
 8003de2:	7e09      	ldrb	r1, [r1, #24]
 8003de4:	b085      	sub	sp, #20
 8003de6:	296e      	cmp	r1, #110	; 0x6e
 8003de8:	4617      	mov	r7, r2
 8003dea:	4606      	mov	r6, r0
 8003dec:	4698      	mov	r8, r3
 8003dee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003df0:	f000 80b3 	beq.w	8003f5a <_printf_i+0x182>
 8003df4:	d822      	bhi.n	8003e3c <_printf_i+0x64>
 8003df6:	2963      	cmp	r1, #99	; 0x63
 8003df8:	d036      	beq.n	8003e68 <_printf_i+0x90>
 8003dfa:	d80a      	bhi.n	8003e12 <_printf_i+0x3a>
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	f000 80b9 	beq.w	8003f74 <_printf_i+0x19c>
 8003e02:	2958      	cmp	r1, #88	; 0x58
 8003e04:	f000 8083 	beq.w	8003f0e <_printf_i+0x136>
 8003e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e10:	e032      	b.n	8003e78 <_printf_i+0xa0>
 8003e12:	2964      	cmp	r1, #100	; 0x64
 8003e14:	d001      	beq.n	8003e1a <_printf_i+0x42>
 8003e16:	2969      	cmp	r1, #105	; 0x69
 8003e18:	d1f6      	bne.n	8003e08 <_printf_i+0x30>
 8003e1a:	6820      	ldr	r0, [r4, #0]
 8003e1c:	6813      	ldr	r3, [r2, #0]
 8003e1e:	0605      	lsls	r5, r0, #24
 8003e20:	f103 0104 	add.w	r1, r3, #4
 8003e24:	d52a      	bpl.n	8003e7c <_printf_i+0xa4>
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6011      	str	r1, [r2, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	da03      	bge.n	8003e36 <_printf_i+0x5e>
 8003e2e:	222d      	movs	r2, #45	; 0x2d
 8003e30:	425b      	negs	r3, r3
 8003e32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e36:	486f      	ldr	r0, [pc, #444]	; (8003ff4 <_printf_i+0x21c>)
 8003e38:	220a      	movs	r2, #10
 8003e3a:	e039      	b.n	8003eb0 <_printf_i+0xd8>
 8003e3c:	2973      	cmp	r1, #115	; 0x73
 8003e3e:	f000 809d 	beq.w	8003f7c <_printf_i+0x1a4>
 8003e42:	d808      	bhi.n	8003e56 <_printf_i+0x7e>
 8003e44:	296f      	cmp	r1, #111	; 0x6f
 8003e46:	d020      	beq.n	8003e8a <_printf_i+0xb2>
 8003e48:	2970      	cmp	r1, #112	; 0x70
 8003e4a:	d1dd      	bne.n	8003e08 <_printf_i+0x30>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	f043 0320 	orr.w	r3, r3, #32
 8003e52:	6023      	str	r3, [r4, #0]
 8003e54:	e003      	b.n	8003e5e <_printf_i+0x86>
 8003e56:	2975      	cmp	r1, #117	; 0x75
 8003e58:	d017      	beq.n	8003e8a <_printf_i+0xb2>
 8003e5a:	2978      	cmp	r1, #120	; 0x78
 8003e5c:	d1d4      	bne.n	8003e08 <_printf_i+0x30>
 8003e5e:	2378      	movs	r3, #120	; 0x78
 8003e60:	4865      	ldr	r0, [pc, #404]	; (8003ff8 <_printf_i+0x220>)
 8003e62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e66:	e055      	b.n	8003f14 <_printf_i+0x13c>
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e6e:	1d19      	adds	r1, r3, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6011      	str	r1, [r2, #0]
 8003e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e08c      	b.n	8003f96 <_printf_i+0x1be>
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e82:	6011      	str	r1, [r2, #0]
 8003e84:	bf18      	it	ne
 8003e86:	b21b      	sxthne	r3, r3
 8003e88:	e7cf      	b.n	8003e2a <_printf_i+0x52>
 8003e8a:	6813      	ldr	r3, [r2, #0]
 8003e8c:	6825      	ldr	r5, [r4, #0]
 8003e8e:	1d18      	adds	r0, r3, #4
 8003e90:	6010      	str	r0, [r2, #0]
 8003e92:	0628      	lsls	r0, r5, #24
 8003e94:	d501      	bpl.n	8003e9a <_printf_i+0xc2>
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	e002      	b.n	8003ea0 <_printf_i+0xc8>
 8003e9a:	0668      	lsls	r0, r5, #25
 8003e9c:	d5fb      	bpl.n	8003e96 <_printf_i+0xbe>
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	296f      	cmp	r1, #111	; 0x6f
 8003ea2:	bf14      	ite	ne
 8003ea4:	220a      	movne	r2, #10
 8003ea6:	2208      	moveq	r2, #8
 8003ea8:	4852      	ldr	r0, [pc, #328]	; (8003ff4 <_printf_i+0x21c>)
 8003eaa:	2100      	movs	r1, #0
 8003eac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eb0:	6865      	ldr	r5, [r4, #4]
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	60a5      	str	r5, [r4, #8]
 8003eb6:	f2c0 8095 	blt.w	8003fe4 <_printf_i+0x20c>
 8003eba:	6821      	ldr	r1, [r4, #0]
 8003ebc:	f021 0104 	bic.w	r1, r1, #4
 8003ec0:	6021      	str	r1, [r4, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d13d      	bne.n	8003f42 <_printf_i+0x16a>
 8003ec6:	2d00      	cmp	r5, #0
 8003ec8:	f040 808e 	bne.w	8003fe8 <_printf_i+0x210>
 8003ecc:	4665      	mov	r5, ip
 8003ece:	2a08      	cmp	r2, #8
 8003ed0:	d10b      	bne.n	8003eea <_printf_i+0x112>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	07db      	lsls	r3, r3, #31
 8003ed6:	d508      	bpl.n	8003eea <_printf_i+0x112>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	6862      	ldr	r2, [r4, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	bfde      	ittt	le
 8003ee0:	2330      	movle	r3, #48	; 0x30
 8003ee2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ee6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003eea:	ebac 0305 	sub.w	r3, ip, r5
 8003eee:	6123      	str	r3, [r4, #16]
 8003ef0:	f8cd 8000 	str.w	r8, [sp]
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	aa03      	add	r2, sp, #12
 8003ef8:	4621      	mov	r1, r4
 8003efa:	4630      	mov	r0, r6
 8003efc:	f7ff fef6 	bl	8003cec <_printf_common>
 8003f00:	3001      	adds	r0, #1
 8003f02:	d14d      	bne.n	8003fa0 <_printf_i+0x1c8>
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	b005      	add	sp, #20
 8003f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f0e:	4839      	ldr	r0, [pc, #228]	; (8003ff4 <_printf_i+0x21c>)
 8003f10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f14:	6813      	ldr	r3, [r2, #0]
 8003f16:	6821      	ldr	r1, [r4, #0]
 8003f18:	1d1d      	adds	r5, r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6015      	str	r5, [r2, #0]
 8003f1e:	060a      	lsls	r2, r1, #24
 8003f20:	d50b      	bpl.n	8003f3a <_printf_i+0x162>
 8003f22:	07ca      	lsls	r2, r1, #31
 8003f24:	bf44      	itt	mi
 8003f26:	f041 0120 	orrmi.w	r1, r1, #32
 8003f2a:	6021      	strmi	r1, [r4, #0]
 8003f2c:	b91b      	cbnz	r3, 8003f36 <_printf_i+0x15e>
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	f022 0220 	bic.w	r2, r2, #32
 8003f34:	6022      	str	r2, [r4, #0]
 8003f36:	2210      	movs	r2, #16
 8003f38:	e7b7      	b.n	8003eaa <_printf_i+0xd2>
 8003f3a:	064d      	lsls	r5, r1, #25
 8003f3c:	bf48      	it	mi
 8003f3e:	b29b      	uxthmi	r3, r3
 8003f40:	e7ef      	b.n	8003f22 <_printf_i+0x14a>
 8003f42:	4665      	mov	r5, ip
 8003f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f48:	fb02 3311 	mls	r3, r2, r1, r3
 8003f4c:	5cc3      	ldrb	r3, [r0, r3]
 8003f4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f52:	460b      	mov	r3, r1
 8003f54:	2900      	cmp	r1, #0
 8003f56:	d1f5      	bne.n	8003f44 <_printf_i+0x16c>
 8003f58:	e7b9      	b.n	8003ece <_printf_i+0xf6>
 8003f5a:	6813      	ldr	r3, [r2, #0]
 8003f5c:	6825      	ldr	r5, [r4, #0]
 8003f5e:	1d18      	adds	r0, r3, #4
 8003f60:	6961      	ldr	r1, [r4, #20]
 8003f62:	6010      	str	r0, [r2, #0]
 8003f64:	0628      	lsls	r0, r5, #24
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	d501      	bpl.n	8003f6e <_printf_i+0x196>
 8003f6a:	6019      	str	r1, [r3, #0]
 8003f6c:	e002      	b.n	8003f74 <_printf_i+0x19c>
 8003f6e:	066a      	lsls	r2, r5, #25
 8003f70:	d5fb      	bpl.n	8003f6a <_printf_i+0x192>
 8003f72:	8019      	strh	r1, [r3, #0]
 8003f74:	2300      	movs	r3, #0
 8003f76:	4665      	mov	r5, ip
 8003f78:	6123      	str	r3, [r4, #16]
 8003f7a:	e7b9      	b.n	8003ef0 <_printf_i+0x118>
 8003f7c:	6813      	ldr	r3, [r2, #0]
 8003f7e:	1d19      	adds	r1, r3, #4
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	681d      	ldr	r5, [r3, #0]
 8003f84:	6862      	ldr	r2, [r4, #4]
 8003f86:	2100      	movs	r1, #0
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f000 f8e1 	bl	8004150 <memchr>
 8003f8e:	b108      	cbz	r0, 8003f94 <_printf_i+0x1bc>
 8003f90:	1b40      	subs	r0, r0, r5
 8003f92:	6060      	str	r0, [r4, #4]
 8003f94:	6863      	ldr	r3, [r4, #4]
 8003f96:	6123      	str	r3, [r4, #16]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f9e:	e7a7      	b.n	8003ef0 <_printf_i+0x118>
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	462a      	mov	r2, r5
 8003fa4:	4639      	mov	r1, r7
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	47c0      	blx	r8
 8003faa:	3001      	adds	r0, #1
 8003fac:	d0aa      	beq.n	8003f04 <_printf_i+0x12c>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	079b      	lsls	r3, r3, #30
 8003fb2:	d413      	bmi.n	8003fdc <_printf_i+0x204>
 8003fb4:	68e0      	ldr	r0, [r4, #12]
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	4298      	cmp	r0, r3
 8003fba:	bfb8      	it	lt
 8003fbc:	4618      	movlt	r0, r3
 8003fbe:	e7a3      	b.n	8003f08 <_printf_i+0x130>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	464a      	mov	r2, r9
 8003fc4:	4639      	mov	r1, r7
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	47c0      	blx	r8
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d09a      	beq.n	8003f04 <_printf_i+0x12c>
 8003fce:	3501      	adds	r5, #1
 8003fd0:	68e3      	ldr	r3, [r4, #12]
 8003fd2:	9a03      	ldr	r2, [sp, #12]
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	42ab      	cmp	r3, r5
 8003fd8:	dcf2      	bgt.n	8003fc0 <_printf_i+0x1e8>
 8003fda:	e7eb      	b.n	8003fb4 <_printf_i+0x1dc>
 8003fdc:	2500      	movs	r5, #0
 8003fde:	f104 0919 	add.w	r9, r4, #25
 8003fe2:	e7f5      	b.n	8003fd0 <_printf_i+0x1f8>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1ac      	bne.n	8003f42 <_printf_i+0x16a>
 8003fe8:	7803      	ldrb	r3, [r0, #0]
 8003fea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ff2:	e76c      	b.n	8003ece <_printf_i+0xf6>
 8003ff4:	08004439 	.word	0x08004439
 8003ff8:	0800444a 	.word	0x0800444a

08003ffc <_sbrk_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	2300      	movs	r3, #0
 8004000:	4c05      	ldr	r4, [pc, #20]	; (8004018 <_sbrk_r+0x1c>)
 8004002:	4605      	mov	r5, r0
 8004004:	4608      	mov	r0, r1
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	f7fd fa84 	bl	8001514 <_sbrk>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d102      	bne.n	8004016 <_sbrk_r+0x1a>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	b103      	cbz	r3, 8004016 <_sbrk_r+0x1a>
 8004014:	602b      	str	r3, [r5, #0]
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	20000480 	.word	0x20000480

0800401c <__sread>:
 800401c:	b510      	push	{r4, lr}
 800401e:	460c      	mov	r4, r1
 8004020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004024:	f000 f8e4 	bl	80041f0 <_read_r>
 8004028:	2800      	cmp	r0, #0
 800402a:	bfab      	itete	ge
 800402c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800402e:	89a3      	ldrhlt	r3, [r4, #12]
 8004030:	181b      	addge	r3, r3, r0
 8004032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004036:	bfac      	ite	ge
 8004038:	6563      	strge	r3, [r4, #84]	; 0x54
 800403a:	81a3      	strhlt	r3, [r4, #12]
 800403c:	bd10      	pop	{r4, pc}

0800403e <__swrite>:
 800403e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004042:	461f      	mov	r7, r3
 8004044:	898b      	ldrh	r3, [r1, #12]
 8004046:	4605      	mov	r5, r0
 8004048:	05db      	lsls	r3, r3, #23
 800404a:	460c      	mov	r4, r1
 800404c:	4616      	mov	r6, r2
 800404e:	d505      	bpl.n	800405c <__swrite+0x1e>
 8004050:	2302      	movs	r3, #2
 8004052:	2200      	movs	r2, #0
 8004054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004058:	f000 f868 	bl	800412c <_lseek_r>
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	4632      	mov	r2, r6
 8004060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004064:	81a3      	strh	r3, [r4, #12]
 8004066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800406a:	463b      	mov	r3, r7
 800406c:	4628      	mov	r0, r5
 800406e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004072:	f000 b817 	b.w	80040a4 <_write_r>

08004076 <__sseek>:
 8004076:	b510      	push	{r4, lr}
 8004078:	460c      	mov	r4, r1
 800407a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407e:	f000 f855 	bl	800412c <_lseek_r>
 8004082:	1c43      	adds	r3, r0, #1
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	bf15      	itete	ne
 8004088:	6560      	strne	r0, [r4, #84]	; 0x54
 800408a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800408e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004092:	81a3      	strheq	r3, [r4, #12]
 8004094:	bf18      	it	ne
 8004096:	81a3      	strhne	r3, [r4, #12]
 8004098:	bd10      	pop	{r4, pc}

0800409a <__sclose>:
 800409a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800409e:	f000 b813 	b.w	80040c8 <_close_r>
	...

080040a4 <_write_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4605      	mov	r5, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	4c05      	ldr	r4, [pc, #20]	; (80040c4 <_write_r+0x20>)
 80040b0:	6022      	str	r2, [r4, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7fc fe3c 	bl	8000d30 <_write>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_write_r+0x1e>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_write_r+0x1e>
 80040c0:	602b      	str	r3, [r5, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	20000480 	.word	0x20000480

080040c8 <_close_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	2300      	movs	r3, #0
 80040cc:	4c05      	ldr	r4, [pc, #20]	; (80040e4 <_close_r+0x1c>)
 80040ce:	4605      	mov	r5, r0
 80040d0:	4608      	mov	r0, r1
 80040d2:	6023      	str	r3, [r4, #0]
 80040d4:	f7fd f9ed 	bl	80014b2 <_close>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d102      	bne.n	80040e2 <_close_r+0x1a>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	b103      	cbz	r3, 80040e2 <_close_r+0x1a>
 80040e0:	602b      	str	r3, [r5, #0]
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
 80040e4:	20000480 	.word	0x20000480

080040e8 <_fstat_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	2300      	movs	r3, #0
 80040ec:	4c06      	ldr	r4, [pc, #24]	; (8004108 <_fstat_r+0x20>)
 80040ee:	4605      	mov	r5, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	f7fd f9e7 	bl	80014c8 <_fstat>
 80040fa:	1c43      	adds	r3, r0, #1
 80040fc:	d102      	bne.n	8004104 <_fstat_r+0x1c>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	b103      	cbz	r3, 8004104 <_fstat_r+0x1c>
 8004102:	602b      	str	r3, [r5, #0]
 8004104:	bd38      	pop	{r3, r4, r5, pc}
 8004106:	bf00      	nop
 8004108:	20000480 	.word	0x20000480

0800410c <_isatty_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	2300      	movs	r3, #0
 8004110:	4c05      	ldr	r4, [pc, #20]	; (8004128 <_isatty_r+0x1c>)
 8004112:	4605      	mov	r5, r0
 8004114:	4608      	mov	r0, r1
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	f7fd f9e5 	bl	80014e6 <_isatty>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d102      	bne.n	8004126 <_isatty_r+0x1a>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	b103      	cbz	r3, 8004126 <_isatty_r+0x1a>
 8004124:	602b      	str	r3, [r5, #0]
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	20000480 	.word	0x20000480

0800412c <_lseek_r>:
 800412c:	b538      	push	{r3, r4, r5, lr}
 800412e:	4605      	mov	r5, r0
 8004130:	4608      	mov	r0, r1
 8004132:	4611      	mov	r1, r2
 8004134:	2200      	movs	r2, #0
 8004136:	4c05      	ldr	r4, [pc, #20]	; (800414c <_lseek_r+0x20>)
 8004138:	6022      	str	r2, [r4, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	f7fd f9dd 	bl	80014fa <_lseek>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_lseek_r+0x1e>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	b103      	cbz	r3, 800414a <_lseek_r+0x1e>
 8004148:	602b      	str	r3, [r5, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	20000480 	.word	0x20000480

08004150 <memchr>:
 8004150:	b510      	push	{r4, lr}
 8004152:	b2c9      	uxtb	r1, r1
 8004154:	4402      	add	r2, r0
 8004156:	4290      	cmp	r0, r2
 8004158:	4603      	mov	r3, r0
 800415a:	d101      	bne.n	8004160 <memchr+0x10>
 800415c:	2300      	movs	r3, #0
 800415e:	e003      	b.n	8004168 <memchr+0x18>
 8004160:	781c      	ldrb	r4, [r3, #0]
 8004162:	3001      	adds	r0, #1
 8004164:	428c      	cmp	r4, r1
 8004166:	d1f6      	bne.n	8004156 <memchr+0x6>
 8004168:	4618      	mov	r0, r3
 800416a:	bd10      	pop	{r4, pc}

0800416c <memmove>:
 800416c:	4288      	cmp	r0, r1
 800416e:	b510      	push	{r4, lr}
 8004170:	eb01 0302 	add.w	r3, r1, r2
 8004174:	d807      	bhi.n	8004186 <memmove+0x1a>
 8004176:	1e42      	subs	r2, r0, #1
 8004178:	4299      	cmp	r1, r3
 800417a:	d00a      	beq.n	8004192 <memmove+0x26>
 800417c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004180:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004184:	e7f8      	b.n	8004178 <memmove+0xc>
 8004186:	4283      	cmp	r3, r0
 8004188:	d9f5      	bls.n	8004176 <memmove+0xa>
 800418a:	1881      	adds	r1, r0, r2
 800418c:	1ad2      	subs	r2, r2, r3
 800418e:	42d3      	cmn	r3, r2
 8004190:	d100      	bne.n	8004194 <memmove+0x28>
 8004192:	bd10      	pop	{r4, pc}
 8004194:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004198:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800419c:	e7f7      	b.n	800418e <memmove+0x22>

0800419e <__malloc_lock>:
 800419e:	4770      	bx	lr

080041a0 <__malloc_unlock>:
 80041a0:	4770      	bx	lr

080041a2 <_realloc_r>:
 80041a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a4:	4607      	mov	r7, r0
 80041a6:	4614      	mov	r4, r2
 80041a8:	460e      	mov	r6, r1
 80041aa:	b921      	cbnz	r1, 80041b6 <_realloc_r+0x14>
 80041ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041b0:	4611      	mov	r1, r2
 80041b2:	f7ff bab1 	b.w	8003718 <_malloc_r>
 80041b6:	b922      	cbnz	r2, 80041c2 <_realloc_r+0x20>
 80041b8:	f7ff fa62 	bl	8003680 <_free_r>
 80041bc:	4625      	mov	r5, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c2:	f000 f827 	bl	8004214 <_malloc_usable_size_r>
 80041c6:	42a0      	cmp	r0, r4
 80041c8:	d20f      	bcs.n	80041ea <_realloc_r+0x48>
 80041ca:	4621      	mov	r1, r4
 80041cc:	4638      	mov	r0, r7
 80041ce:	f7ff faa3 	bl	8003718 <_malloc_r>
 80041d2:	4605      	mov	r5, r0
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d0f2      	beq.n	80041be <_realloc_r+0x1c>
 80041d8:	4631      	mov	r1, r6
 80041da:	4622      	mov	r2, r4
 80041dc:	f7fe ff02 	bl	8002fe4 <memcpy>
 80041e0:	4631      	mov	r1, r6
 80041e2:	4638      	mov	r0, r7
 80041e4:	f7ff fa4c 	bl	8003680 <_free_r>
 80041e8:	e7e9      	b.n	80041be <_realloc_r+0x1c>
 80041ea:	4635      	mov	r5, r6
 80041ec:	e7e7      	b.n	80041be <_realloc_r+0x1c>
	...

080041f0 <_read_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4605      	mov	r5, r0
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	2200      	movs	r2, #0
 80041fa:	4c05      	ldr	r4, [pc, #20]	; (8004210 <_read_r+0x20>)
 80041fc:	6022      	str	r2, [r4, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7fd f93a 	bl	8001478 <_read>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_read_r+0x1e>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	b103      	cbz	r3, 800420e <_read_r+0x1e>
 800420c:	602b      	str	r3, [r5, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	20000480 	.word	0x20000480

08004214 <_malloc_usable_size_r>:
 8004214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004218:	1f18      	subs	r0, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	bfbc      	itt	lt
 800421e:	580b      	ldrlt	r3, [r1, r0]
 8004220:	18c0      	addlt	r0, r0, r3
 8004222:	4770      	bx	lr

08004224 <_init>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr

08004230 <_fini>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr
